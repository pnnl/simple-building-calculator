{"version":3,"sources":["store/scenarioListReducer.jsx","store/scenarioReducer.jsx","util/dataProcessor.jsx","store/index.jsx","components/navbar.jsx","util/strUtil.jsx","components/fileUploader.jsx","components/globalForm.jsx","util/algorithmLoader.jsx","views/projectPage.jsx","components/optionParameter.jsx","util/rangeSliderUtils.jsx","components/rangeSlider.jsx","components/inputParameter.jsx","components/inputForm.jsx","components/customBarChart.jsx","components/customTable.jsx","components/customModal.jsx","views/designPage.jsx","components/customBadge.jsx","components/customListDropDownButton.jsx","components/customListGroupItem.jsx","components/scroll.jsx","components/customPieChart.jsx","views/scenarioPage.jsx","components/customDisplayCard.jsx","components/customResponsiveTable.jsx","components/scenarioCompare.jsx","components/scenarioReport.jsx","components/customTornadoDiagram.jsx","components/scenarioOpportunity.jsx","views/visualizationPage.jsx","userdoc/subdoc/mainInterface.jsx","userdoc/subdoc/projectDoc.jsx","userdoc/subdoc/scenarioDoc.jsx","userdoc/subdoc/ecmParamDoc.jsx","userdoc/subdoc/designLeftHand.jsx","userdoc/subdoc/endUseDoc.jsx","userdoc/subdoc/designRightHand.jsx","userdoc/subdoc/scenarioFull.jsx","userdoc/subdoc/visualizeCompareDoc.jsx","userdoc/subdoc/visualizeOpportunityDoc.jsx","userdoc/subdoc/visualizeReport.jsx","userdoc/documentation.jsx","userdoc/overview.jsx","views/userDoc.jsx","App.js","reportWebVitals.js","index.js"],"names":["useScenarioListReducer","useLocalStorage","initialListState","savedState","saveState","reducerLocalStorage","useCallback","state","action","newState","refreshedScenarioState","cases","type","payload","scenarioID","newID","newKey","index","findIndex","scenario","id","newScenario","push","new_scenario","modify_scenario","key","modify_index","remove_id","deleteScenarioCases","deleteIndex","reducer","useReducer","useScenarioReducer","initialScenarioState","newValue","designValue","convert_num_to_percent","num","parseFloat","toFixed","format_num_to_string","digits","toLocaleString","minimumFractionDigits","getDefaultRates","rate","data","getProjectBaselineScenario","scenarioList","filter","convert_scenario_list_to_option_list","scenario_list","fullExport","case_list","option_list","map","fixed_2","Math","round","getAnalysisTypeUnit","analysisType","getData","bldgType","climateZone","extractKeyValuePair","getAnalysisType","getProjectBaseline","buildingType","getProjectMaxTech","getValuesByKeys","keys","keyValues","i","length","getDefaultDataForStandard","value","makeResponsibleTableData","tableData","floorArea","tableDataArray","tableData2DArray","createArray","forEach","downloadDesignScenarioToLocal","scenarios","sys","scenario_list_cases","result","caseResult","scenario_case","sId","replacer","header","Object","join","row","fieldName","JSON","stringify","downloadDataFromLocal","dataStorage","localStorage","parse","getItem","getElectricConversionFactor","sourceToSiteRate","electricToCarbonRate","electricityRate","tempElectricFactor","getNatGasConversionFactor","natGasToCarbonRate","natGasRate","dataKey","dataObj","dataArray","includes","arr","Array","arguments","args","prototype","slice","call","apply","this","ProjectContext","createContext","ProjectProvider","children","project","setProject","setBldgType","setClimateZone","hvac","setHVAC","standard","setStandard","setFloorArea","currentWorkingScenario","setCurrentWorkingScenario","mainContext","currentBaseCase","setCurrentBaseCase","Provider","AdvancedConfigContext","AdvancedConfigProvider","setElectricityRate","setNatGasRate","electricityCarbon","setElectricityCarbon","natGasCarbon","setNatGasCarbon","electricitySourceToSite","setElectricitySourceToSite","natGasSourceToSite","setNatGasSourceToSite","ScenarioListContext","dispatch","ScenarioListProvider","ScenarioContext","ScenarioProvider","NavBar","useContext","scenarioListState","Fragment","Navbar","bg","fixed","variant","Container","Brand","href","src","alt","style","Nav","className","to","isActive","undefined","Button","encodeURIComponent","download","fileConditionRender","genID","uuidv4","isEmptyOrUndefined","str","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","focusedStyle","acceptStyle","rejectStyle","thumbsContainer","flexWrap","textAlign","marginTop","thumb","border","marginBottom","marginRight","width","height","boxSizing","thumbInner","minWidth","overflow","img","FileUploader","props","jsonFile","handleUploadJsonFile","useDropzone","accept","multiple","acceptedFiles","getRootProps","getInputProps","isFocused","isDragAccept","isDragReject","files","file","name","path","size","useEffect","reader","FileReader","onload","e","contents","target","readAsText","useMemo","ConfigToggle","eventKey","decoratedOnClick","useAccordionButton","onClick","GlobalForm","bldgTypeOptions","climateZonesOptions","onSubmitGlobalVariable","scenarioState","scenarioDispatch","scenarioListDispatch","useState","projectNameState","setProjectNameState","bldgTypeState","setBldgTypeState","climateZoneState","setClimateZoneState","floorAreaState","setFloorAreaState","electricityRateState","setElectricityRateState","natGasRateState","setNatGasRateState","electricityCarbonState","setElectricityCarbonState","natGasCarbonState","setNatGasCarbonState","electricitySourceToSiteState","setElectricitySourceToSiteState","natGasSourceToSiteState","setNatGasSourceToSiteState","show","setShow","handleClose","setJsonFile","onValueHandler","event","electricRateNew","natgasRateNew","electricCarbonRateNew","natgasCarbonRateNew","electricSourceSiteRateNew","natgasSourceSiteRateNew","onUpdateAdvancedSettings","_","require","isEqual","submitAction","window","confirm","dataUtils","strUtils","alert","onChange","options","class","Accordion","defaultActiveKey","Collapse","Form","Label","InputGroup","FormControl","Text","Modal","onHide","Header","closeButton","Title","Body","Footer","project_name","bldg_type","climate_zone","floor_area","current_scenario","scenario_basecase","electricity_rate","natgas_rate","eletrcity_carbon","natgas_carbon","electricity_source_site","natgas_source_site","calculateGen","param","conversion_factor","alg_general","algorithm","calculateSubTotal","calculateCool","calculateAux","calculateNGHeat","calculateELHeat","alg","total","feature_value","coefficient_value","var_name_array","split","endsWith","var_name","pow","Home","navigate","useNavigate","climateZoneOptions","fadeInRight","useSpring","opacity","config","mass","tension","friction","clamp","transform","from","fadeInLeft","Row","Col","sm","div","payLoad","scenarioId","Date","toISOString","OptionParameter","tooltips","alertMessage","onValueChange","selectedOption","setSelectedOption","title","capitalize","charAt","toUpperCase","substr","min","max","constants","orientation","horizontal","dimension","direction","reverseDirection","coordinate","vertical","Slider","context","handleFormat","format","handleUpdate","slider","sliderPos","handlePos","handle","setState","limit","grab","handleStart","onChangeStart","document","addEventListener","handleDrag","handleEnd","active","stopPropagation","classList","dataset","position","contains","onChangeComplete","removeEventListener","handleKeyDown","preventDefault","sliderValue","keyCode","step","getPositionFromValue","percentage","getValueFromPosition","pos","baseVal","reverse","node","coordinateStyle","directionStyle","clientCoordinateStyle","touches","getBoundingClientRect","coordinates","fill","label","renderLabels","labels","ref","sl","cx","ResizeObserver","observe","tooltip","handleLabel","coords","fillStyle","handleStyle","showTooltip","labelItems","labelKeys","sort","a","b","labelPosition","labelCoords","labelStyle","onMouseDown","onTouchStart","onTouchEnd","s","onMouseUp","sh","onTouchMove","onKeyDown","tabIndex","st","Component","defaultProps","InputParameter","inputText","setInputText","switchStatus","setSwitchStatus","valueChangeHandler","val","formated_output_str","replaceAll","test","indexOf","xs","ButtonGroup","radio","idx","ToggleButton","checked","currentTarget","marginLeft","reversed","InputForm","onOutputChange","React","parameterMeta","defaultArray","hasOwnProperty","tempData","optionArray","option","defaultData","setDataArray","handleValueChange","newDataArray","ListGroup","rank","sortedKey","meta","unit","Item","optionUpdateMessage","CustomBarChart","plotData","barmode","values","plotDataList","setPlotDataList","plotDataArray","layout","text","yaxis","Styles","styled","CustomTable","columns","setTableData","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps","CustomModal","buttonVariant","buttonSize","buttonStyle","buttonText","modalTitle","createAction","closeText","confirmText","selectValue","setSelectValue","tableInit","base","rowName","design","savings","savePercent","Design","useParams","defaultBaseCase","tempScenarioName","selectedScenario","analysisTypeArray","baseCase","setBaseCase","scenarioName","setScenarioName","setAnalysisType","electricConvertFactor","setElectricConvertFactor","natGasConvertFactor","setNatGasConvertFactor","y","x","setPlotData","tableColumns","accessor","handleOutputChange","updateGraph","keyWord","output","x_array","y_array","trace","plotDataTemp","tableDataTemp","baseObj","designObj","savingObj","savingPerObj","newBaseCase","dispatchCombined","dateTime","baseObject","Card","tempNatGasFactor","CustomBadge","status","Badge","CustomListDropDownButton","changeHandler","DropdownButton","Dropdown","as","Link","Divider","CustomListGroupItem","valueStatus","displayStatus","handleMouseClick","showScenario","setShowScenario","numDigit","textOverflow","substring","time","eui","Scroll","overflowY","CustomPieChart","scenarioData","scenarioLabels","textinfo","insidetextorientation","marker","colors","autosize","margin","legend","yanchor","font","family","displaylogo","scenarioStatus","Scenario","currentState","setCurrentState","searchWords","setSearchWords","sortWords","setSortWords","displayStatusValue","setDisplayStatusValue","selectedCase","setSelectedCase","createNewScenario","linkDesign","order","top","left","float","md","onSelect","placeholder","toLowerCase","Table","scenarioSnapshotRender","CustomDisplayCard","cardTitle","displayData","displaySmall","badgeInfo","badgeColor","compareMetrics","CustomResponsiveTable","dataValue","rowColorArrayMap","defaultRowColorArray","colorArray","rowColorArray","align","line","heigh","category","colorMap","ScenarioCompare","generatePlotData","traces","electricMultiplier","natGasMultiplier","maxTechX","maxTechY","j","startsWith","maxTechCase","tempPlotData","ScenarioReport","scenarioListArray","setSelectedScenario","electricityConversionFactor","setElectricityConversionFactor","natGasConversionFactor","setNatGasConversionFactor","calculatedElectricValues","calculatedNatGasValues","calculatedValues","updateFuelPieChart","updateBreakdownChart","baselineMetricValue","setBaselineMetricValue","selectedScenarioMetricValue","setSelectedScenarioMetricValue","fuelPieChartValue","setFuelPieChartValue","metricBreakdownValue","setMetricBreakdownValue","metricBreakdownLabel","setMetricBreakdownLabel","fuelData","breakdownData","breakdownLabel","selection","handleOptionChanges","outcome","renderComplianceOutcome","CustomTornadoDiagram","baselineValue","srMaxTech","srWorstCase","srMaxTechParam","srWorstCaseParam","graphLayout","xaxis_tickangle","bargap","xaxis","ticksuffix","ScenarioOpportunity","parameter","baseline","maxTech","worstCase","createPlotData","extremeCase","sr","baselineExtremeCase","abs","sr1","setSR1","sr2","setSR2","Visualizer","Tabs","Tab","MainInterface","ProjectDoc","fontFamily","ScenarioDoc","Formula","texStr","tex","MathJaxContext","MathJax","inline","ECMParamDoc","DesignLeftHand","EndUseDoc","DesignRightHand","ScenarioFullDoc","VisualizerCompareDoc","VisualizerOpportunityDoc","VisualizerReportDoc","DocumentationPage","numbered","OverviewPage","Manual","Content","Pane","App","basename","element","replace","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.39ed471f.chunk.js","sourcesContent":["import { useCallback, useReducer } from \"react\";\nimport { useLocalStorage } from \"react-use\";\n\nconst LOCAL_STORAGE_KEY = \"scenario-list-reducer-123\"\n\nconst reducer = (state, action) => {\n    let refreshedScenarioState = [...state.cases]\n\n    switch (action.type){\n        case \"load\":\n            // this action is used to load the user data\n            refreshedScenarioState = action.payload\n            return {\n                \"cases\": refreshedScenarioState[\"cases\"]\n            }\n        case \"duplicate\":\n            // Duplicate feature - \n            const scenarioID = action.payload\n            const newID = action.newKey\n            let index = refreshedScenarioState.findIndex(scenario => scenario.id === scenarioID)\n            let newScenario = {...refreshedScenarioState[index], \"id\": newID}\n            refreshedScenarioState.push(newScenario)\n            return {\n                \"cases\": refreshedScenarioState\n            }\n\n        case \"add\":\n            const new_scenario = action.payload\n            //TODO we need to check whether the new_scenario has ID that is same as the existing ID.\n            refreshedScenarioState.push(new_scenario)\n            return {\n                \"cases\": refreshedScenarioState\n            }\n        case \"modify\":\n            const modify_scenario = action.payload\n            const id = action.key\n            let modify_index = refreshedScenarioState.findIndex(scenario => scenario.id === id)\n            refreshedScenarioState[modify_index] = {...refreshedScenarioState[modify_index], ...modify_scenario}\n            return {\n                \"cases\": refreshedScenarioState\n            }\n        case \"del\":\n            const remove_id = action.payload\n            const deleteScenarioCases = [...state.cases];\n            let deleteIndex = deleteScenarioCases.findIndex(scenario => scenario.id === remove_id)\n            deleteScenarioCases[deleteIndex] = {...deleteScenarioCases[deleteIndex], \"status\":\"inactive\"}\n            return {\n                \"cases\": deleteScenarioCases\n            }\n        case \"reset\":\n            //clean up the state\n            return initialListState\n        default:\n            return state\n    }\n}\n\nexport const useScenarioListReducer = () => {\n    //grab saved value from 'localstoraeg' and a function to update it, if no value is retrieved, use initial state\n    const [savedState, saveState] = useLocalStorage(\n        LOCAL_STORAGE_KEY,\n        initialListState,\n    )\n\n    //wrap `reducer` with a memoized function that syncs the `newState` to `localStorage` before\n    //returning `newState`.\n    const reducerLocalStorage = useCallback(\n        (state, action)=>{\n            const newState = reducer(state, action)\n            saveState(newState)\n            return newState\n        },\n        [saveState],\n    )\n    //use wrapped reducer and the saved value from `localStorage` as params to `useReducer`.\n    return useReducer(reducerLocalStorage, savedState)\n}\n\nexport const initialListState = {\n    cases:[]\n}\n","import { useLocalStorage } from 'react-use'\nimport { useCallback, useReducer } from 'react'\n\nconst LOCAL_STORAGE_KEY = \"scenario-reducer-123\"\n\nconst reducer = (state, action) => {\n    const scenarioID = action.key\n    switch (action.type){\n        case \"load\":\n            let loadData = action.payload\n            return loadData\n        case \"duplicate\":\n            const newID = action.newKey\n            const newValue = {...state[scenarioID]}\n            return {\n                ...state,\n                [newID]: newValue\n            }\n        case \"modify\":\n            const designValue = action.payload;\n            return {\n                ...state,\n                [scenarioID]:{\n                    ...state[scenarioID],\n                    ...designValue\n                }\n            }\n        //no action - set to default\n        case \"add\":\n            //add a new design scenario\n            const payload = action.payload\n            return {\n                ...state,\n                [scenarioID]:payload\n            }\n        case \"reset\":\n            return initialScenarioState\n            \n        default:\n            return state\n    }\n}\n\nexport const useScenarioReducer = () => {\n    const [savedState, saveState] = useLocalStorage(\n        LOCAL_STORAGE_KEY,\n        initialScenarioState,\n    )\n\n    //wrap reducer with a memoized function that syncs the newStaet to localStorage before\n    //returning newState.\n    const reducerLocalStorage = useCallback(\n        (state, action) => {\n            const newState = reducer(state, action)\n            saveState(newState)\n            return newState\n        },\n        [saveState],\n    )\n\n    return useReducer(reducerLocalStorage, savedState)\n}\n\nexport const initialScenarioState = {\n}","import data from \"../store/data_setting.json\";\n\nexport function convert_num_to_percent(num){\n  return parseFloat(num).toFixed(1)+\"%\"\n}\n\nexport function format_num_to_string(num, digits=2){\n  return num.toLocaleString('en-US', {minimumFractionDigits: digits})\n}\n\nexport function getSelectedScenarioInfo(scenarioList, selection){\n  //get the scenario from a scenario list based on the selection {\"value\": \"value\", \"label\": \"label\"}\n  let selectedScenario = scenarioList.filter(scenario => scenario[\"id\"] === selection[\"value\"])[0]\n  return selectedScenario\n}\n\nexport function getScenarioNameByID(scenarioList, scenarioID){\n  // find and return a scenario name by its ID.\n  let selectedScenario = scenarioList.filter(scenario => scenario[\"id\"] === scenarioID)\n  return selectedScenario.length > 0 ? selectedScenario[0][\"name\"] : null\n}\n\nexport function getDefaultRates(rate){\n  //get the utility metric rates\n  return data[\"rates\"][rate]\n}\n\nexport function getConversionFactor(fromUnit, toUnit){\n  //get the conversion factor for a unit\n  return data[\"unit_conversion\"][fromUnit][toUnit]\n}\n\nexport function getProjectBaselineScenario(scenarioList){\n  //get the baseline scenario of the project - baseline\n  let selectedScenario = scenarioList.filter(scenario => scenario[\"id\"] === \"baseline\")[0]\n  return selectedScenario\n}\n\nexport function getProjectMaxTechScenario(scenarioList){\n    //get the max tech scenario of the project - max_tech\n    let selectedScenario = scenarioList.filter(scenario => scenario[\"id\"] === \"max_tech\")[0]\n    return selectedScenario\n}\n\nexport function convert_scenario_list_to_option_list(scenario_list, fullExport = true){\n  let case_list = scenario_list.cases\n  if(fullExport){\n    let option_list = case_list.filter(scenario => scenario[\"status\"] === \"active\" \n    || scenario[\"id\"] === \"baseline\" \n    || scenario[\"id\"] === \"max_tech\").map(function(scenario){\n      return {\"value\": scenario[\"id\"], \"label\": scenario[\"name\"]}\n    })\n    return option_list\n  }else{\n    let option_list = case_list.filter(scenario => scenario[\"status\"] === \"active\" ).map(function(scenario){\n      return {\"value\": scenario[\"id\"], \"label\": scenario[\"name\"]}\n    })\n    return option_list\n  }\n\n}\n\nexport function fixed_2(num){\n  return Math.round(num * 100) / 100;\n}\n\nexport function getAnalysisTypeUnit(analysisType){\n  return data['analysis_type'][analysisType]['unit']\n}\n\nexport function getData(key, bldgType, climateZone){\n  return extractKeyValuePair(key, bldgType, climateZone)\n}\n\n//this function retrieve the standard options\nexport function getStandardData(bldgType, climateZone) {\n  return extractKeyValuePair('standard', bldgType, climateZone)\n}\n\n//this function retrieve the hvac options\nexport function getHVACData(bldgType, climateZone){\n  return extractKeyValuePair('hvac', bldgType, climateZone)\n}\n\nexport function getBuildingTypeData(){\n  return extractKeyValuePair('bldgType')\n}\n\nexport function getClimateZoneData(){\n  return extractKeyValuePair('climate')\n}\n\nexport function getParameterMetaData(){\n  return data['meta']\n}\n\nexport function getAnalysisType(){\n  return extractKeyValuePair('analysis_type')\n}\n\nexport function getProjectBaseline(buildingType, climateZone){\n  let  defaultData = data['project_baseline'][buildingType['value']][climateZone['value']]\n  return defaultData\n}\n\nexport function getProjectMaxTech(buildingType, climateZone){\n  let  defaultData = data['project_max_tech'][buildingType['value']][climateZone['value']]\n  return defaultData\n}\n\nexport function getProjectWorstCase(buildingType, climateZone){\n  let defaultData = data['project_worst_case'][buildingType['value']][climateZone['value']]\n  return defaultData\n}\n\nexport function getValuesByKeys(keys, scenario){\n  let keyValues = []\n  for(let i=0; i<keys.length; i++){\n    keyValues.push(scenario[keys[i]])\n  }\n  return keyValues\n}\n\nexport function getListOfParametersExceptionHVACAndStandard(){\n  let meta = data['meta']\n  let parameterList = Object.keys(meta)\n  return parameterList.filter(parameter => parameter !== \"HVAC\" && parameter !== \"standard\")\n}\n\n//this function retrieve the default data from a standard\nexport function getDefaultDataForStandard(value, buildingType, climateZone) {\n  //todo though unlikely, need a check in case we cannot find the default data\n  let defaultData = data[\"standard\"][buildingType['value']][climateZone['value']][value][\"data\"];\n  return defaultData;\n}\n\n// function to create a base plot bar table chart\nexport function makeBasePlotData(value){\n  let x = [\"Electricity-General\", \"Electricity-Auxiliary\", \"Electricity-Cooling\", \"Electricity-Heating\",\"Natural Gas-Heating\"]\n  let y = []\n  y.push(value[\"Electricity-General\"])\n  y.push(value[\"Electricity-Auxiliary\"])\n  y.push(value[\"Electricity-Cooling\"])\n  y.push(value[\"Electricity-Heating\"])\n  y.push(value[\"Natural Gas-Heating\"])\n  return {\"base\": {x: x, y: y, \"name\": value[\"name\"], \"type\": \"bar\"}}\n}\n\n//this function retrieve the default data of a parameter from a standard\nexport function getDefaultParamDataForStandard(value, buildingType, climateZone, param) {\n  //todo though unlikely, need a check in case we cannot find the default data\n  let defaultData = data[\"standard\"][buildingType['value']][climateZone['value']][value][\"data\"][param];\n  return defaultData;\n}\n\n//this function prepares the tableData\n//tableData should be scenarioList\nexport function makeResponsibleTableData(tableData, floorArea){\n  let baseCase = 37.26 //TODO kBtu/sqft - temperary solution\n  let tableDataArray = tableData['cases']\n  let tableData2DArray = createArray(4, tableDataArray.length) //need to add a row for title (4)\n  tableDataArray.forEach(function(scenario, i){\n    tableData2DArray[0][i] = scenario['name']\n    tableData2DArray[1][i] = format_num_to_string(fixed_2(scenario['eui'] * floorArea))\n    tableData2DArray[2][i] = scenario['eui']\n    tableData2DArray[3][i] = convert_num_to_percent((baseCase - scenario['eui']) / baseCase * 100)\n  })\n  return tableData2DArray\n}\n\n//this function calculates the savings and saving percentage comparing \n//the base and design models\nexport function makeTableData(tableData){\n  //return table data\n  let baseObj = tableData['base']\n  let designObj = tableData['design']\n  let savingObj = tableData['savings']\n  let savingPerObj = tableData['savePercent']\n\n  //set up total value\n  baseObj['total'] = 0.0\n  designObj['total'] = 0.0\n  savingObj['total'] = 0.0\n  savingPerObj['total'] = 0.0\n\n  for(let key in savingObj){\n    if(key !== 'rowName' && key !== 'total'){\n      savingObj[key] = fixed_2(baseObj[key]- designObj[key])\n      //round to 1 decimal point\n      savingPerObj[key] = fixed_2((baseObj[key] - designObj[key]) / baseObj[key])\n\n      //add total\n      baseObj['total'] += baseObj[key]\n      designObj['total'] += designObj[key]\n    }\n  }\n\n  savingObj['total'] = fixed_2(baseObj['total']- designObj['total'])\n  savingPerObj['total'] = fixed_2((baseObj['total'] - designObj['total']) / baseObj['total'])\n  baseObj['total'] = fixed_2(baseObj['total'])\n  designObj['total'] = fixed_2(designObj['total'])\n}\n\n//This function makes a default table header\n//Do not change the table content. \nexport function makeTableColumn(){\n  const columns = [\n    {\n      Header: '',\n      accessor: 'rowName',\n    },\n    {\n      Header: 'Electricity',\n      columns: [\n        {\n          Header: 'General',\n          accessor: 'Electricity-General'\n        },\n        {\n          Header: 'Auxiliary',\n          accessor: 'Electricity-Auxiliary',\n        },\n        {\n          Header: 'Space Cooling',\n          accessor: 'Electricity-Cooling',\n        },\n        {\n          Header: 'Space Heating',\n          accessor: 'Electricity-Heating',\n        },\n      ],\n    },\n    {\n      Header: 'Natural Gas',\n      columns: [\n        // {\n        //   Header: 'Service Water Heating',\n        //   accessor: 'Natural Gas-SWH'\n        // },\n        {\n          Header: 'Space Heating',\n          accessor: 'Natural Gas-Heating'\n        }\n      ]\n    },\n    {\n      Header: 'Total',\n      columns:[\n        {\n          Header: '',\n          accessor:'total'\n        }\n      ]\n    },\n  ]\n  return columns\n}\n\nexport function checkCaseName(targetName, data, scenarioID){\n  /*\n  function checks whether the name in the row is unique in the database.\n  It will return the name in a string for the row.\n  If the name is not unique, then add a 'copy' to the name to turn it into unique name\n\n  data shall be an array of hash\n  row shall be a hash\n  */\n\n  //if target name and id matches to the existing scenario, return the targetName\n  for(var i=0; i<data.length; i++){\n      if(data[i]['name'] === targetName && data[i]['id'] === scenarioID){\n          return targetName\n      }\n  }\n\n  let listOfNames = data.map(r => r['name'])\n  return checkCaseNameHelper(targetName, listOfNames)\n}\n\n// combine the scenario_list and scenarios and convert the data into a csv format\nexport function downloadDesignScenarioToLocal(scenario_list, scenarios){\n  let scenario_list_cases = scenario_list.cases\n  //clean up\n  const result = []\n  let id\n  let sys\n  for (id in scenario_list_cases){\n    let caseResult = {}\n    let scenario_case = scenario_list_cases[id]\n    for(sys in scenario_case){\n      if(sys === \"id\"){\n        //get the scenario data\n        let scenario = scenarios[scenario_case[sys]]\n        let sId\n        for(sId in scenario){\n          if(sId === \"HVAC\"){\n            caseResult[sId] = scenario[sId][\"label\"]\n          } else if(sId===\"standard\"){\n            //skip, do nothing\n          } else{\n            caseResult[sId] = scenario[sId]\n          }\n        }\n      }else{\n        caseResult[sys]=scenario_case[sys]\n      }\n    }\n    result.push(caseResult)\n  }\n\n  const replacer = (key, value) => value === null? '': value \n  const header = Object.keys(result[0])\n  const csv = [\n    header.join(\",\"), //header row first\n    ...result.map(row => header.map(fieldName => JSON.stringify(row[fieldName], replacer)).join(','))\n  ].join('\\r\\n')\n\n  return csv\n}\n\n//local storage related functions\nexport function downloadDataFromLocal(){\n  let dataStorage = {}\n  Object.keys(localStorage).forEach(function(key){\n    dataStorage[key] = JSON.parse(localStorage.getItem(key))\n  })\n  return dataStorage\n}\n\n//get Electric conversion factor by analysis type\n//requires conversion rate and floor area to perform the analysis\nexport function getElectricConversionFactor(analysisType, floorArea, sourceToSiteRate, electricToCarbonRate, electricityRate){\n  let tempElectricFactor = 1.0\n  //need to update the base case.\n  if(analysisType === 'source_eui'){\n    tempElectricFactor = sourceToSiteRate\n  }else if(analysisType === 'site_energy'){\n    tempElectricFactor = floorArea\n  }else if(analysisType === 'source_energy'){\n    tempElectricFactor = floorArea * sourceToSiteRate\n  }else if(analysisType === 'carbon_emission'){\n    tempElectricFactor = electricToCarbonRate\n  }else if(analysisType === 'utility_cost'){\n    tempElectricFactor = electricityRate\n    tempElectricFactor = 1.0\n  }\n  return tempElectricFactor\n}\n\nexport function getNatGasConversionFactor(analysisType, floorArea, sourceToSiteRate, natGasToCarbonRate, natGasRate){\n  let tempNatGasFactor = 1.0\n\n  //need to update the base case.\n  if(analysisType === 'source_eui'){\n    tempNatGasFactor = sourceToSiteRate\n  }else if(analysisType === 'site_energy'){\n    tempNatGasFactor = floorArea\n  }else if(analysisType === 'source_energy'){\n    tempNatGasFactor = floorArea * sourceToSiteRate\n  }else if(analysisType === 'carbon_emission'){\n    tempNatGasFactor = natGasToCarbonRate\n  }else if(analysisType === 'utility_cost'){\n    tempNatGasFactor = natGasRate\n  }else{\n    tempNatGasFactor = 1.0\n  }\n  return tempNatGasFactor\n}\n\n//HELPER REACT FUNCTIONS\n// extract key value pair data (options) from the database\nfunction extractKeyValuePair(dataKey, bldgType=null, climateZone=null){\n  let dataObj = data[dataKey]\n  let dataArray = []\n\n  //standard will need to identify the bldgeType and climate zone\n  if(dataKey === 'standard'){\n    dataObj = dataObj[bldgType['value']][climateZone['value']]\n  }\n\n  for (const key in dataObj){\n    if(dataKey === 'hvac'){\n      if (dataObj[key]['climate_zone'].includes(climateZone['value']) && dataObj[key]['bldg_type'].includes(bldgType['value'])){\n        dataArray.push({\"value\": key, \"label\": dataObj[key]['label']})\n      }\n    }else{\n      dataArray.push({\"value\": key, \"label\": dataObj[key]['label']})\n    }\n  }\n  return dataArray\n}\n\n//Create dimensional arrays\nfunction createArray(length) {\n  var arr = new Array(length || 0),\n      i = length;\n\n  if (arguments.length > 1) {\n      var args = Array.prototype.slice.call(arguments, 1);\n      while(i--) arr[length-1 - i] = createArray.apply(this, args);\n  }\n\n  return arr;\n}\n\n// unique name check\nfunction checkCaseNameHelper(caseName, listOfNames){\n  let unique = true\n  for(let i=0; i<listOfNames.length; i++){\n      if(caseName === listOfNames[i]){\n          unique = false\n      }\n  }\n  if(unique){\n      return caseName\n  }else{\n      caseName = caseName + ' copy'\n      return checkCaseNameHelper(caseName, listOfNames)\n  }\n}","import React, { createContext} from 'react';\nimport { useLocalStorage } from 'react-use';\nimport { useScenarioListReducer, initialListState } from './scenarioListReducer';\nimport { useScenarioReducer, initialScenarioState } from './scenarioReducer';\nimport { getDefaultRates } from '../util/dataProcessor';\n//Uses React Hooks Context API to provide a global store for state\nexport const ProjectContext = createContext();\nexport const ProjectProvider = ({children}) => {\n    //provide global state hooks\n    const[project, setProject] = useLocalStorage(\"project_name\", \"Sample Project\")\n    const[bldgType, setBldgType] = useLocalStorage(\"bldg_type\", \"\") \n    const[climateZone, setClimateZone] = useLocalStorage(\"climate_zone\", \"\")\n    const[hvac, setHVAC] = useLocalStorage(\"hvac\", \"\")\n    const[standard, setStandard] = useLocalStorage(\"standard\", \"\")\n    const[floorArea, setFloorArea] = useLocalStorage(\"floor_area\", \"\")\n    //indicates whether a user is in design phase\n    const[currentWorkingScenario, setCurrentWorkingScenario] = useLocalStorage(\"current_scenario\", \"\")\n    const[currentBaseCase, setCurrentBaseCase] = useLocalStorage(\"scenario_basecase\",\"\")\n\n    const mainContext = {\n        project,\n        setProject,\n        bldgType,\n        setBldgType,\n        climateZone,\n        setClimateZone,\n        hvac, setHVAC,\n        standard, setStandard,\n        currentWorkingScenario,\n        setCurrentWorkingScenario,\n        floorArea,\n        setFloorArea,\n        currentBaseCase,\n        setCurrentBaseCase,\n    };\n\n    return <ProjectContext.Provider value={mainContext}>{children}</ProjectContext.Provider>\n}\n\nexport const AdvancedConfigContext = createContext();\nexport const AdvancedConfigProvider = ({children}) => {\n    //project config parameters\n    const[electricityRate, setElectricityRate] = useLocalStorage(\"electricity_rate\", getDefaultRates(\"electricity_rate\"))\n    const[natGasRate, setNatGasRate] = useLocalStorage(\"natgas_rate\", getDefaultRates(\"natgas_rate\"))\n    const[electricityCarbon, setElectricityCarbon] = useLocalStorage(\"eletrcity_carbon\", getDefaultRates(\"eletrcity_carbon\"))\n    const[natGasCarbon, setNatGasCarbon] = useLocalStorage(\"natgas_carbon\", getDefaultRates(\"natgas_carbon\"))\n    const[electricitySourceToSite, setElectricitySourceToSite] = useLocalStorage(\"electricity_source_site\", getDefaultRates(\"electricity_source_site\"))\n    const[natGasSourceToSite, setNatGasSourceToSite] = useLocalStorage(\"natgas_source_site\", getDefaultRates(\"natgas_source_site\"))\n\n    const mainContext = {\n        electricityRate, setElectricityRate,\n        natGasRate, setNatGasRate,\n        electricityCarbon, setElectricityCarbon,\n        natGasCarbon, setNatGasCarbon,\n        electricitySourceToSite, setElectricitySourceToSite,\n        natGasSourceToSite, setNatGasSourceToSite,\n    }\n\n    return <AdvancedConfigContext.Provider value={mainContext}>{children}</AdvancedConfigContext.Provider>\n}\n\nexport const ScenarioListContext = createContext({\n    state: initialListState,\n    dispatch: () => null\n});\n\nexport const ScenarioListProvider = ({ children }) => {\n    const [state, dispatch] = useScenarioListReducer()\n  \n    return (\n      <ScenarioListContext.Provider value={[ state, dispatch ]}>\n          { children }\n      </ScenarioListContext.Provider>\n    )\n  }\n\nexport const ScenarioContext = createContext({\n    state: initialScenarioState,\n    dispatch: () => null\n});\n\nexport const ScenarioProvider = ({ children }) => {\n    const [state, dispatch] = useScenarioReducer()\n    return (\n        <ScenarioContext.Provider value={[state, dispatch]}>\n            {children}\n        </ScenarioContext.Provider>\n    )\n}\n","import React, {useContext} from \"react\";\nimport {NavLink} from \"react-router-dom\"\nimport {Navbar, Container, Nav, Button} from \"react-bootstrap\"\nimport {ProjectContext, ScenarioListContext} from \"../store/index\";\nimport {downloadDataFromLocal} from \"../util/dataProcessor\"\n\n//Stateless Functional Component\nconst NavBar = () => {\n\n  const [scenarioListState, scenarioListDispatch] = useContext(ScenarioListContext)\n  const {project} = useContext(ProjectContext)\n\n  const fileConditionRender = () => {\n    if(scenarioListState!== undefined && \"cases\" in scenarioListState && scenarioListState.cases.length > 2){\n      return (\n        <Button \n        variant=\"success\"\n        type=\"button\"\n        href={`data:text/json;charset=utf-8, ${encodeURIComponent(\n          JSON.stringify(downloadDataFromLocal())\n        )}`}\n        download={`${project}.json`}\n        >Download Session</Button>\n      )\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Navbar bg=\"dark\" fixed=\"top\" variant=\"dark\">\n        <Container>\n        <Navbar.Brand href=\"/simple-building-calculator\"><img src=\"/simple-building-calculator/favicon.ico\" alt=\"\" style={{\"width\": \"32px\", \"marginBottom\": \"7px\"}}></img>  Simple Building Calculator</Navbar.Brand>\n        <Nav className=\"me-auto\">\n          <NavLink to=\"/project\" className={isActive => \"nav-link\" + (!isActive? \"unselected\":\"\")}>Project</NavLink>\n          <NavLink to=\"/scenario\" className={isActive => \"nav-link\" + (!isActive? \"unselected\":\"\")}>Scenario</NavLink>\n          <NavLink to=\"/visual\" className={isActive => \"nav-link\" + (!isActive? \"unselected\":\"\")}>Visualization</NavLink>\n          <NavLink to=\"/manual\" className={isActive => \"nav-link\" + (!isActive? \"unselected\": \"\")}>Manual</NavLink>\n        </Nav>\n        {fileConditionRender()}\n        </Container>\n      </Navbar>\n    </React.Fragment>\n  );\n};\n\nexport default NavBar;\n","import {v4 as uuidv4} from 'uuid'\n\nexport function isEmpty(str) {\n    return (!str || str.length === 0 );\n}\n\nexport function isUndefined(str){\n    return typeof(str) === \"undefined\"\n}\n\nexport function genID(){\n    return uuidv4()\n}\n\nexport function isEmptyOrUndefined(str){\n    return (!str || str.length === 0 || typeof(str)=== \"undefined\")\n}\n\nexport function strTruncate(str, numDigit){\n    return str.length > numDigit ? str.substring(0, numDigit-3) + \"...\": str;\n}","import React, {useMemo, useEffect} from 'react'\nimport {useDropzone} from 'react-dropzone'\n\nconst baseStyle = {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '20px',\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: '#eeeeee',\n    borderStyle: 'dashed',\n    backgroundColor: '#fafafa',\n    color: '#bdbdbd',\n    outline: 'none',\n    transition: 'border .24s ease-in-out'\n  };\n  \n  const focusedStyle = {\n    borderColor: '#2196f3'\n  };\n  \n  const acceptStyle = {\n    borderColor: '#00e676'\n  };\n  \n  const rejectStyle = {\n    borderColor: '#ff1744'\n  };\n\n  const thumbsContainer = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    textAlign: 'center',\n    marginTop: 16\n  };\n\n  const thumb = {\n    display: 'inline-flex',\n    borderRadius: 2,\n    border: '1px solid #eaeaea',\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: 'border-box'\n  };\n  \n  const thumbInner = {\n    display: 'flex',\n    minWidth: 0,\n    overflow: 'hidden'\n  };\n  \n  const img = {\n    display: 'block',\n    width: 'auto',\n    height: '100%'\n  };\n\nfunction FileUploader(props){\n  const{jsonFile, handleUploadJsonFile} = props\n\n  const {acceptedFiles, \n      getRootProps, \n      getInputProps, \n      isFocused,\n      isDragAccept,\n      isDragReject} = useDropzone({accept: 'application/json', multiple:false});\n\n  const files = acceptedFiles.map(file=>(\n    <div>\n      <div style={thumb} key={file.name}>\n        <div style={thumbInner}>\n          <img src={\"/simple-building-calculator/img/json.icon.PNG\"} alt={\"\"} style={img}/>\n        </div>\n      </div>\n      <p><strong>{file.path}</strong>-{file.size} bytes</p>\n    </div>\n\n  ));\n\n  useEffect(() => {\n    if(acceptedFiles.length === 1 && jsonFile !== acceptedFiles){\n      let reader = new FileReader();\n      reader.onload = function(e) {\n        var contents = e.target.result;\n        handleUploadJsonFile(JSON.parse(contents));\n      };\n      reader.readAsText(acceptedFiles[0]);\n    }\n  }, [acceptedFiles, jsonFile]);\n\n  const style = useMemo(() => ({\n      ...baseStyle,\n      ...(isFocused ? focusedStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {})\n    }), [\n      isFocused,\n      isDragAccept,\n      isDragReject\n    ]);\n\n  return(\n      <section className=\"container\">\n        <div {...getRootProps({style})}>\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop json file here, or click to select a file</p>\n        </div>\n        <aside style={thumbsContainer}>\n            {files}\n        </aside>\n    </section>\n    )\n}\n\n\nexport default FileUploader","import React, {useState, useContext} from \"react\";\nimport Select from \"react-select\"\nimport { Accordion, useAccordionButton, Button, InputGroup, Form, FormControl, Modal } from \"react-bootstrap\";\nimport { ProjectContext, ScenarioContext, ScenarioListContext, AdvancedConfigContext} from \"../store/index\";\nimport * as strUtils from \"../util/strUtil.jsx\";\nimport * as dataUtils from '../util/dataProcessor';\nimport FileUploader from \"../components/fileUploader\"\n\nfunction ConfigToggle({children, eventKey}) {\n    const decoratedOnClick = useAccordionButton(eventKey);\n    return (\n        <Button variant=\"link\" onClick={decoratedOnClick}>{children}</Button>\n    )\n}\n\nexport default function GlobalForm(props){\n    const {bldgTypeOptions, climateZonesOptions, onSubmitGlobalVariable} = props\n    const {project, setProject, bldgType, setBldgType, climateZone, setClimateZone, floorArea, setFloorArea, setCurrentWorkingScenario, setCurrentBaseCase} = useContext(ProjectContext)\n    const {electricityRate, setElectricityRate, natGasRate, setNatGasRate, electricityCarbon, setElectricityCarbon, natGasCarbon, setNatGasCarbon,\n        electricitySourceToSite, setElectricitySourceToSite, natGasSourceToSite, setNatGasSourceToSite} = useContext(AdvancedConfigContext)\n    const [scenarioState, scenarioDispatch] = useContext(ScenarioContext)\n    const [scenarioListState, scenarioListDispatch] = useContext(ScenarioListContext)\n\n    //const availableStandards = dataUtils.getStandardData()\n    const [projectNameState, setProjectNameState] = useState(project)\n    const [bldgTypeState, setBldgTypeState] = useState(bldgType)\n    const [climateZoneState, setClimateZoneState] = useState(climateZone)\n    const [floorAreaState, setFloorAreaState] = useState(floorArea)\n    const [electricityRateState, setElectricityRateState] = useState(electricityRate)\n    const [natGasRateState, setNatGasRateState] = useState(natGasRate)\n    const [electricityCarbonState, setElectricityCarbonState] = useState(electricityCarbon)\n    const [natGasCarbonState, setNatGasCarbonState] = useState(natGasCarbon)\n    const [electricitySourceToSiteState, setElectricitySourceToSiteState] = useState(electricitySourceToSite)\n    const [natGasSourceToSiteState, setNatGasSourceToSiteState] = useState(natGasSourceToSite)\n\n    //modal status\n    const[show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const[jsonFile, setJsonFile] = useState()\n\n    const onValueHandler = (event, action) => {\n        //handler to handle the local state updates\n        if(action === undefined){\n            //text input action\n            if(event.target.name === \"floor_area\"){\n                setFloorAreaState(event.target.value)\n            }else if(event.target.name === \"project\"){\n                setProjectNameState(event.target.value)\n            }else if(event.target.name === \"electricity_rate\"){\n                let electricRateNew = {\n                    ... electricityRateState,\n                    \"value\": event.target.value\n                }\n                setElectricityRateState(electricRateNew)\n            }else if(event.target.name === \"natgas_rate\"){\n                let natgasRateNew = {\n                    ... natGasRateState,\n                    \"value\": event.target.value\n                }\n                setNatGasRateState(natgasRateNew)\n            }else if(event.target.name === \"electricity_carbon_rate\"){\n                let electricCarbonRateNew = {\n                    ... electricityCarbonState,\n                    \"value\": event.target.value\n                }\n                setElectricityCarbonState(electricCarbonRateNew)\n            }else if(event.target.name === \"natgas_carbon_rate\"){\n                let natgasCarbonRateNew = {\n                    ... natGasCarbonState,\n                    \"value\": event.target.value\n                }\n                setNatGasCarbonState(natgasCarbonRateNew)\n            }else if(event.target.name === \"electricity_source_to_site_rate\"){\n                let electricSourceSiteRateNew = {\n                    ... electricitySourceToSiteState,\n                    \"value\": event.target.value\n                }\n                setElectricitySourceToSiteState(electricSourceSiteRateNew)\n            }else if(event.target.name === \"natgas_source_to_site_rate\"){\n                let natgasSourceSiteRateNew = {\n                    ... natGasSourceToSiteState,\n                    \"value\": event.target.value\n                }\n                setNatGasSourceToSiteState(natgasSourceSiteRateNew)\n            }\n        }else{\n            if(action.name === \"bldg_type\"){\n                setBldgTypeState(event)\n            }else if(action.name === \"climate_zone\"){\n                setClimateZoneState(event)\n            }\n        }\n    }\n\n    const onUpdateAdvancedSettings = () => {\n        const _ = require('lodash'); \n                    if (! _.isEqual(electricityRate, electricityRateState)){\n                        setElectricityRate(electricityRateState)\n                    }\n\n                    if (! _.isEqual(natGasRate, natGasRateState)){\n                        setNatGasRate(natGasRateState)\n                    }\n\n                    if (! _.isEqual(electricityCarbon, electricityCarbonState)){\n                        setElectricityCarbon(electricityCarbonState)\n                    }\n\n                    if (! _.isEqual(natGasCarbon, natGasCarbonState)){\n                        setNatGasCarbon(natGasCarbonState)\n                    }\n\n                    if (! _.isEqual(electricitySourceToSite, electricitySourceToSiteState)){\n                        setElectricitySourceToSite(electricitySourceToSiteState)\n                    }\n\n                    if (! _.isEqual(natGasSourceToSite, natGasSourceToSiteState)){\n                        setNatGasSourceToSite(natGasSourceToSiteState)\n                    }\n    }\n\n    const submitAction = (e) => {\n        //flag to trigger whether we should update when the action is update\n        if(e.target.id===\"discard\"){\n            if(window.confirm(\"Caution: this action will delete all your previous work. Do you want to proceed?\")){\n                setProjectNameState(\"\")\n                setBldgTypeState(\"\")\n                setClimateZoneState(\"\")\n                setFloorAreaState(\"\")\n                setElectricityRateState(dataUtils.getDefaultRates(\"electricity_rate\"))\n                setNatGasRateState(dataUtils.getDefaultRates(\"natgas_rate\"))\n                setElectricityCarbonState(dataUtils.getDefaultRates(\"eletrcity_carbon\"))\n                setNatGasCarbonState(dataUtils.getDefaultRates(\"natgas_carbon\"))\n                setElectricitySourceToSiteState(dataUtils.getDefaultRates(\"electricity_source_site\"))\n                setNatGasSourceToSiteState(dataUtils.getDefaultRates(\"natgas_source_site\"))\n                scenarioDispatch({type:\"reset\"})\n                scenarioListDispatch({type:\"reset\"})\n            }\n        }else if(e.target.id === \"continue\"){\n            onUpdateAdvancedSettings()\n            onSubmitGlobalVariable(e, bldgTypeState, climateZoneState)\n        }else if(e.target.id === \"load\"){\n            //TODO load option\n        }else if(e.target.id === \"confirm\" || e.target.id === \"start\"){\n            if (\n                !strUtils.isEmptyOrUndefined(projectNameState) &&\n                !strUtils.isEmptyOrUndefined(bldgTypeState) &&\n                !strUtils.isEmptyOrUndefined(climateZoneState) &&\n                !strUtils.isEmptyOrUndefined(floorAreaState)\n              ) {\n                  let testFloorArea = parseFloat(floorAreaState)\n\n                  if(testFloorArea > 50000){\n                    alert(\"Floor area shall be smaller than 50,000 SQFT to use this tool.\");\n                  } else if(scenarioListState['cases'].length > 0 || Object.keys(scenarioState)>0){\n                    alert(\"Please discard previous project data to proceed the new data\");\n                  } else {\n                    setProject(projectNameState)\n                    setBldgType(bldgTypeState)\n                    setClimateZone(climateZoneState)\n                    setFloorArea(floorAreaState)\n                    onUpdateAdvancedSettings()\n                    onSubmitGlobalVariable(e, bldgTypeState, climateZoneState)\n                  }\n              } else {\n                alert(\"One of the parameters in not defined. Please check your inputs before start a project.\");\n            }\n        }\n    }\n\n    const loadJsonFile = () => {\n        //load file and set to the project\n        setProject(jsonFile.project_name)\n        setProjectNameState(jsonFile.project_name)\n        setBldgType(jsonFile.bldg_type)\n        setBldgTypeState(jsonFile.bldg_type)\n        setClimateZone(jsonFile.climate_zone)\n        setClimateZoneState(jsonFile.climate_zone)\n        setFloorArea(jsonFile.floor_area)\n        setFloorAreaState(jsonFile.floor_area)\n        setCurrentWorkingScenario(jsonFile.current_scenario)\n        setCurrentBaseCase(jsonFile.scenario_basecase)\n        setElectricityRate(jsonFile.electricity_rate)\n        setElectricityRateState(jsonFile.electricity_rate)\n        setNatGasRate(jsonFile.natgas_rate)\n        setNatGasRateState(jsonFile.natgas_rate)\n        setElectricityCarbon(jsonFile.eletrcity_carbon)\n        setElectricityCarbonState(jsonFile.eletrcity_carbon)\n        setNatGasCarbon(jsonFile.natgas_carbon)\n        setNatGasCarbonState(jsonFile.natgas_carbon)\n        setElectricitySourceToSite(jsonFile.electricity_source_site)\n        setElectricitySourceToSiteState(jsonFile.electricity_source_site)\n        setNatGasSourceToSite(jsonFile.natgas_source_site)\n        setNatGasSourceToSiteState(jsonFile.natgas_source_site)\n        scenarioDispatch({type:\"load\", payload: jsonFile[\"scenario-reducer-123\"]})\n        scenarioListDispatch({type:\"load\", payload: jsonFile[\"scenario-list-reducer-123\"]})\n        handleClose()\n    }\n\n    const renderSubmitButton = () => {\n        if(Object.keys(bldgType).length === 0 || Object.keys(climateZone).length === 0){\n            return (<Button variant=\"outline-primary\" size=\"lg\" id=\"start\" onClick={submitAction}>Start</Button>)\n        }else if(scenarioListState['cases'].length > 0 || Object.keys(scenarioState)>0){\n            return (<><Button variant=\"outline-success\" size=\"lg\" id=\"continue\" onClick={submitAction}>Continue</Button>\n            <Button variant=\"outline-warning\" size=\"lg\" id=\"discard\" onClick={submitAction}>New Project</Button></>)\n        }else{\n            return(<><Button variant=\"outline-info\" size=\"lg\" id=\"confirm\" onClick={submitAction}>Confirm</Button></>)\n        }\n    }\n\n    return (\n        <div className=\"container-fluid\">\n            <div>\n                <div className=\"form-group\">\n                    <h6>Project Name:</h6>\n                    <input type=\"text\" className=\"form-control\" value={projectNameState} name=\"project\" onChange={onValueHandler}></input>\n                </div>\n                <div className=\"form-group\">\n                    <h6>Building Type:</h6>\n                    <Select value={bldgTypeState} options={[...bldgTypeOptions]} name=\"bldg_type\" onChange={onValueHandler}></Select>\n                </div>\n                <div className=\"form-group\">\n                    <h6>Climate Zone:</h6>\n                    <Select value={climateZoneState} options={[...climateZonesOptions]} name=\"climate_zone\" onChange={onValueHandler}></Select>\n                </div>\n                <h6>Floor Area:</h6>\n                <div className=\"input-group\">\n                    <input type=\"text\" className=\"form-control\" value={floorAreaState} name=\"floor_area\" aria-describedby=\"floor-addon\" onChange={onValueHandler}></input>\n                    <div class=\"input-group-append\">\n                        <span class=\"input-group-text\" id=\"floor-addon\">ft2</span>\n                    </div>\n                </div>\n                <Accordion defaultActiveKey=\"none\" style={{\"marginTop\": \"25px\"}}>\n                    <div className=\"icard\">\n                        <div className=\"icard-heading\">\n                            <ConfigToggle eventKey=\"advanced_config\">Advance</ConfigToggle>\n                        </div>\n                        <Accordion.Collapse eventKey=\"advanced_config\">\n                            <div className=\"icard-content\">\n                                <Form.Label><h6>Electricity Rate:</h6></Form.Label>\n                                <InputGroup className=\"mb-3\">\n                                    <FormControl value={electricityRateState[\"value\"]} name=\"electricity_rate\" onChange={onValueHandler}></FormControl>\n                                    <InputGroup.Text>{electricityRateState[\"unit\"]}</InputGroup.Text>\n                                </InputGroup>\n                                <Form.Label><h6>Natural Gas Rate:</h6></Form.Label>\n                                <InputGroup className=\"mb-3\">\n                                    <FormControl value={natGasRateState[\"value\"]} name=\"natgas_rate\" onChange={onValueHandler}></FormControl>\n                                    <InputGroup.Text>{natGasRateState[\"unit\"]}</InputGroup.Text>\n                                </InputGroup>\n                                <Form.Label><h6>Electricity Carbon Emissions:</h6></Form.Label>\n                                <InputGroup className=\"mb-3\">\n                                    <FormControl value={electricityCarbonState[\"value\"]} name=\"electricity_carbon_rate\" onChange={onValueHandler}></FormControl>\n                                    <InputGroup.Text>{electricityCarbonState[\"unit\"]}</InputGroup.Text>\n                                </InputGroup>\n                                <Form.Label><h6>Natural Gas Carbon Emissions:</h6></Form.Label>\n                                <InputGroup className=\"mb-3\">\n                                    <FormControl value={natGasCarbonState[\"value\"]} name=\"natgas_carbon_rate\" onChange={onValueHandler}></FormControl>\n                                    <InputGroup.Text>{natGasCarbonState[\"unit\"]}</InputGroup.Text>\n                                </InputGroup>\n                                <Form.Label><h6>Electricity Source Conversion Factor:</h6></Form.Label>\n                                <InputGroup className=\"mb-3\">\n                                    <FormControl value={electricitySourceToSiteState[\"value\"]} name=\"electricity_source_to_site_rate\" onChange={onValueHandler}></FormControl>\n                                    <InputGroup.Text>{electricitySourceToSiteState[\"unit\"]}</InputGroup.Text>\n                                </InputGroup>\n                                <Form.Label><h6>Natural Gas Source Conversion Factor:</h6></Form.Label>\n                                <InputGroup className=\"mb-3\">\n                                    <FormControl value={natGasSourceToSiteState[\"value\"]} name=\"natgas_source_to_site_rate\" onChange={onValueHandler}></FormControl>\n                                    <InputGroup.Text>{natGasSourceToSiteState[\"unit\"]}</InputGroup.Text>\n                                </InputGroup>\n                            </div>\n                        </Accordion.Collapse>\n                    </div>\n                </Accordion>\n                <Button variant=\"outline-success\" size=\"lg\" className={\"pull-right\"} onClick={handleShow}>Load</Button>\n                <Modal show={show} size=\"lg\" onHide={handleClose}>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Upload File</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <FileUploader\n                                jsonFile={jsonFile}\n                                handleUploadJsonFile = {(e) => {setJsonFile(e)}}\n                            ></FileUploader>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"primary\" onClick={loadJsonFile}>\n                                Submit\n                            </Button>\n                            <Button variant=\"secondary\" onClick={handleClose}>\n                                Close\n                            </Button>\n                        </Modal.Footer>\n                    </Modal>\n                {renderSubmitButton()}\n            </div>\n        </div>\n    )\n}","import algorithm from '../store/model_coefficients.json';\nimport {fixed_2} from './dataProcessor';\n// may not needed at this development\nexport function loadAlgorithm(bldg_type, climate_zone) {\n    return algorithm[bldg_type][climate_zone]\n}\n\n// param is json contains data info from user inputs\n// {WWR:0.3, SRR: 0.3...}\nexport function calculateGen(bldg_type, climate_zone, param, conversion_factor = 1.0){\n    let alg_general = algorithm[bldg_type][climate_zone][param['HVAC']['value']]\n    if('ELgen' in alg_general){\n        return calculateSubTotal(alg_general['ELgen'], param, conversion_factor)\n    }\n    return 0.0\n}\n\n// param is json contains data info from user inputs\n// {WWR:0.3, SRR: 0.3...}\nexport function calculateCool(bldg_type, climate_zone, param, conversion_factor = 1.0){\n    let alg_general = algorithm[bldg_type][climate_zone][param['HVAC']['value']]\n    if('ELcool' in alg_general){\n        return calculateSubTotal(alg_general['ELcool'], param, conversion_factor)\n    }\n    return 0.0\n}\n\n// param is json contains data info from user inputs\n// {WWR:0.3, SRR: 0.3...}\nexport function calculateAux(bldg_type, climate_zone, param, conversion_factor = 1.0){\n    let alg_general = algorithm[bldg_type][climate_zone][param['HVAC']['value']]\n    //let alg = alg_general['ELaux']\n    //let total = 0.0\n    // for(const key in alg){\n    //     if(key.endsWith('2')){\n    //         //if ends with 2, means the parameter is sqaured, e.g UWindow2\n    //         let var_name = key.slice(0,-1)\n    //         let tempVar = Math.pow(param[var_name],2)*alg[key]\n    //         total += tempVar\n    //         console.log(key + \": \" + param[var_name] + \"^2 * \" + alg[key] + \" = \" + tempVar + \";  Total=\" + total)\n    //     }else if(key.includes('_')){\n    //         //in this case, the parameter is times by another paramter, e.g UWindow_UWall\n    //         let var_name_array = key.split('_')\n    //         let tempVar = param[var_name_array[0]] * param[var_name_array[1]] * alg[key]\n    //         total += tempVar\n    //         console.log(key +\": \" + param[var_name_array[0]] + \" * \" + param[var_name_array[1]] + \" * \" + alg[key] + \" = \" + tempVar + \";  Total=\" + total)\n    //     }else if(key === 'Intercept'){\n    //         total += alg[key]\n    //         console.log(\"Intercept: \" + alg[key] + \";  Total=\" + total)\n    //     }else{\n    //         let tempVar = param[key] * alg[key]\n    //         total += tempVar\n    //         console.log(key + \": \" +param[key] + \" * \" + alg[key] + \" = \" + tempVar + \";  Total=\" + total)\n    //     }\n    // }\n    if('ELaux' in alg_general){\n         return calculateSubTotal(alg_general['ELaux'], param, conversion_factor)\n     }\n    return 0.0\n}\n\n// param is json contains data info from user inputs\n// {WWR:0.3, SRR: 0.3...}\nexport function calculateNGHeat(bldg_type, climate_zone, param, conversion_factor = 1.0){\n    let alg_general = algorithm[bldg_type][climate_zone][param['HVAC']['value']]\n    if('NGheat' in alg_general){\n        return calculateSubTotal(alg_general['NGheat'], param, conversion_factor)\n    }\n    return 0.0\n}\n\n// param is json contains data info from user inputs\n// {WWR:0.3, SRR: 0.3...}\nexport function calculateELHeat(bldg_type, climate_zone, param, conversion_factor = 1.0){\n    let alg_general = algorithm[bldg_type][climate_zone][param['HVAC']['value']]\n    if('ELheat' in alg_general){\n        return calculateSubTotal(alg_general['ELheat'], param, conversion_factor)\n    }\n    return 0.0\n}\n\n// helper function to calculate the total consumption for an end user\nfunction calculateSubTotal(alg, param, conversion_factor){\n    let total = 0.0\n    //console.log('----------')\n    //console.log(param)\n    //console.log(alg)\n\n    // Loop for each feature column in model\n    for(const key in alg){\n        // Initialize the value for the current feature\n        let feature_value = 0.0\n        let coefficient_value = alg[key]\n        if(key !== 'Intercept'){    \n            // Split interactive features using the hyphen e.g UWindow_UWall\n            if(key.includes('_')){\n               \n                let var_name_array = key.split('_')\n                feature_value = param[var_name_array[0]] * param[var_name_array[1]]\n            } else {\n                feature_value = param[key]\n            }\n\n            // Handle feature columns that are squared e.g., UWall2\n            if(key.endsWith('2')){\n                //if ends with 2, means the parameter is squared, e.g UWindow2\n                let var_name = key.slice(0,-1)\n                feature_value = Math.pow(param[var_name],2)\n            }\n\n            total += coefficient_value*feature_value\n\n        } else {\n            total += coefficient_value\n        }\n    }\n    //temperary fix for negative values.\n    if(total < 0){\n        total = 0.0\n    }\n\n    return fixed_2(total * conversion_factor)\n}\n","import React, {useContext} from \"react\";\nimport GlobalForm from \"../components/globalForm\";\n// react-bootstrap components\nimport {ScenarioContext, ScenarioListContext} from \"../store/index\";\nimport * as dataUtils from \"../util/dataProcessor.jsx\";\nimport {useNavigate} from \"react-router-dom\"\nimport {Row, Col} from \"react-bootstrap\"\nimport * as alg from '../util/algorithmLoader.jsx'\nimport { animated, useSpring } from \"react-spring\";\n\nfunction Home() {\n  const [scenarioState, scenarioDispatch] = useContext(ScenarioContext)\n  const [scenarioListState, scenarioListDispatch] = useContext(ScenarioListContext)\n\n  const navigate = useNavigate()\n\n  // OPTION VARIABLES INITIALIZATIONS\n  const bldgTypeOptions = dataUtils.getBuildingTypeData();\n  const climateZoneOptions = dataUtils.getClimateZoneData();\n\n  const fadeInRight = useSpring({\n    opacity: 1,\n    config: {mass:1, tension:20, friction:3, clamp: true},\n    transform: \"translate(0px, 0px)\",\n    from: { opacity: 0, transform: \"translate(20px, 0px)\" }\n  });\n\n  const fadeInLeft = useSpring({\n    opacity: 1,\n    config: {mass:1, tension:20, friction:3, clamp: true},\n    transform: \"translate(0px, 0px)\",\n    from: { opacity: 0, transform: \"translate(-20px, 0px)\" }\n  });\n\n    // HANDLER FUNCTIONS\n  //determine the global variables for algorithm selection\n  const handleSubmitGlobalVariable = (e, bldgType, climateZone) => {\n    if(e.target.id === \"start\" || e.target.id === \"confirm\"){\n        // CHECK PASS, Navigate to /scenario\n        //preload project baseline\n        let dataArray = dataUtils.getProjectBaseline(bldgType, climateZone)\n        let payLoad = {}\n        let scenarioId = \"baseline\"\n        scenarioDispatch({type:\"add\", payload: dataArray, key: scenarioId})\n        payLoad[\"id\"] = scenarioId\n        //take out the standard label from the project baseline model\n        payLoad['name'] = dataArray[\"standard\"][\"label\"]\n        payLoad['status'] = \"inactive\"\n        payLoad['type'] = \"base\"\n        payLoad['time'] = new Date().toISOString()\n\n        payLoad['Electricity-General'] = alg.calculateGen(bldgType.value, climateZone.value, dataArray)\n        payLoad['Electricity-Auxiliary'] = alg.calculateAux(bldgType.value, climateZone.value, dataArray)\n        payLoad['Electricity-Cooling'] = alg.calculateCool(bldgType.value, climateZone.value, dataArray)\n        payLoad['Electricity-Heating'] = alg.calculateELHeat(bldgType.value, climateZone.value, dataArray)\n        payLoad['Natural Gas-Heating'] = alg.calculateNGHeat(bldgType.value, climateZone.value, dataArray)\n\n        payLoad['eui'] = dataUtils.fixed_2(payLoad['Electricity-General'] + payLoad['Electricity-Auxiliary'] + \n          payLoad['Electricity-Cooling'] + payLoad['Electricity-Heating'] +\n          payLoad['Natural Gas-Heating'])\n        payLoad['unit'] = \"kBtu/ft2-year\"\n        scenarioListDispatch({type:\"add\", payload: payLoad})\n\n        //preload project max_tech\n        dataArray = dataUtils.getProjectMaxTech(bldgType, climateZone)\n        payLoad = {}\n        scenarioId = \"max_tech\"\n        scenarioDispatch({type:\"add\", payload: dataArray, key: scenarioId})\n        payLoad[\"id\"] = scenarioId\n        payLoad['name'] = \"Max Tech\"\n        payLoad['status'] = \"inactive\"\n        payLoad['type'] = \"max_tech\"\n        payLoad['time'] = new Date().toISOString()\n\n        payLoad['Electricity-General'] = alg.calculateGen(bldgType.value, climateZone.value, dataArray)\n        payLoad['Electricity-Auxiliary'] = alg.calculateAux(bldgType.value, climateZone.value, dataArray)\n        payLoad['Electricity-Cooling'] = alg.calculateCool(bldgType.value, climateZone.value, dataArray)\n        payLoad['Electricity-Heating'] = alg.calculateELHeat(bldgType.value, climateZone.value, dataArray)\n        payLoad['Natural Gas-Heating'] = alg.calculateNGHeat(bldgType.value, climateZone.value, dataArray)\n\n        payLoad['eui'] = dataUtils.fixed_2(payLoad['Electricity-General'] + payLoad['Electricity-Auxiliary'] + \n          payLoad['Electricity-Cooling'] + payLoad['Electricity-Heating'] +\n          payLoad['Natural Gas-Heating'])\n        payLoad['unit'] = \"kBtu/ft2-year\"\n        scenarioListDispatch({type:\"add\", payload: payLoad})\n\n        navigate('/scenario')\n    }else if(e.target.id === \"update\"){\n        scenarioDispatch({type: \"reset\"})\n        scenarioListDispatch({type: \"reset\"})\n\n        navigate('/scenario')\n    }else if(e.target.id === \"continue\"){\n      navigate('/scenario')\n    }\n  };\n\n  return (\n    <>\n      <div className=\"mb-5 bg-light rounded-3\">\n        <Row>\n          <Col sm={6}>\n            <animated.div className=\"icard\" style={fadeInLeft}>\n              <div className=\"icard-title\">\n                <h3>Simple Building Calculator</h3>\n              </div>\n              <div className=\"icard-content\">\n                <p><strong>Simple Building Calculator (SBC)</strong> is a tool for small and simple commercial buildings to generate quick and interactive estimates of energy efficiency measures. </p>\n                <p>SBC can evaluate whole-building or single measure savings in new or existing buildings, compare measure package choices, or provide simplified performance modeling for energy codes and utility incentives. </p>\n                <p>The tool combines physical (annual whole building prototype simulation) and statistical modeling techniques to predict annual energy performance. It supports a variety of building characteristics for envelope, HVAC, and lighting with parameters ranging from vintage to max tech configurations, as well as support for single-zone and simple multi-zone HVAC systems. </p>\n                <img src=\"/simple-building-calculator/img/diagram_intro.PNG\" alt=\"intro of the tornado diagram\" style={{width:\"100%\", height:\"auto\"}}/>\n                <p><i><mark>Sample of the sensitivity analysis diagram</mark></i></p>\n                <p>The Simple Building Calculator is designed to provide immediate feedback for otherwise computationally intensive tasks like measure comparison, development of multiple measure package combinations, or verification that measures meet efficiency targets—all with the goal of providing a tool for quick annual energy simulation of simple commercial buildings.</p>\n                <img src=\"/simple-building-calculator/img/compare_with_standard.PNG\" alt=\"Compare with standards\" style={{width:\"100%\", height:\"auto\"}}/>\n                <p><i><mark>Compare results with the Standard</mark></i></p>\n                <br></br>\n                <h4>For detailed information:</h4>\n                <p>Nambiar, Chitra, and Reid Hart. \"SIMPLE BUILDING CALCULATOR.\" In <i>ASHRAE Topical Conference Proceedings</i>, pp. 423-430. American Society of Heating, Refrigeration and Air Conditioning Engineers, Inc., 2020. <a href=\"/simple-building-calculator/doc/d-bsc20-c051.pdf\">Read</a></p>\n                <p>Hart, Reid, Chitra Chandrasekharan Nambiar, Jeremiah Williams, and Michael Reiner. \"An Energy Calculator for Simple Commercial Buildings.\" (2020). <a href=\"/simple-building-calculator/doc/143_0376_0549_000237.pdf\">Read</a></p>\n                <h5>Feedbacks:</h5>\n                <p>Click the <a href=\"https://docs.google.com/forms/d/10R37Dqbc-T80NYIk-7JumZ8OISeIEyZsmQy_wWvre1M/viewform?edit_requested=true\">Feedback form</a> to request the features you would like to see in SBC!</p>\n              </div>\n            </animated.div>\n          </Col>\n          <Col sm={6}>\n            <animated.div className=\"icard\" style={fadeInRight}>\n              <div className=\"icard-title\">\n                <h3>Project Info</h3>\n              </div>\n              <div className=\"icard-content\">\n                <GlobalForm\n                    bldgTypeOptions={bldgTypeOptions}\n                    climateZonesOptions={climateZoneOptions}\n                    onSubmitGlobalVariable={handleSubmitGlobalVariable}\n                  />\n              </div>\n            </animated.div>\n          </Col>\n        </Row>\n      </div>\n    </>\n  );\n}\n\nexport default Home;","import React, { useEffect, useState } from 'react'\nimport Select from \"react-select\"\n\nexport default function OptionParameter(props){\n\n    const {header, id, type, value, options, tooltips, alertMessage, onValueChange} = props\n    const[selectedOption, setSelectedOption] = useState(value)\n\n    //use effect hook to modify the selected option and rerender this component \n    //whenever the parent value is changed.\n    useEffect(() => {\n        if(value !== selectedOption) {\n            setSelectedOption(value);\n        }\n    }, [value])\n\n    const valueChangeHandler = (event) => {\n        if(alertMessage){\n            if(window.confirm(alertMessage)){\n                onValueChange(event.value, type, id)\n            }\n        }\n    }\n\n    return(\n        <div className=\"row g-3\">\n            <div className=\"col-sm-12\">\n                <h6 data-toggle=\"tooltip\" data-placement=\"top\" title={tooltips}>{header}</h6>\n                <Select options={[...options]} name={id} value={selectedOption} onChange={valueChangeHandler}></Select>\n            </div>\n        </div>\n    );\n\n}","/**\n * Capitalize first letter of string\n * @private\n * @param  {string} - String\n * @return {string} - String with first letter capitalized\n */\n export function capitalize (str) {\n    return str.charAt(0).toUpperCase() + str.substr(1)\n  }\n  \n  /**\n   * Clamp position between a range\n   * @param  {number} - Value to be clamped\n   * @param  {number} - Minimum value in range\n   * @param  {number} - Maximum value in range\n   * @return {number} - Clamped value\n   */\n  export function clamp (value, min, max) {\n    return Math.min(Math.max(value, min), max)\n  }","/* eslint no-debugger: \"warn\" */\nimport cx from 'classnames'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ResizeObserver from 'resize-observer-polyfill'\nimport { capitalize, clamp } from '../util/rangeSliderUtils'\n\n/**\n * Predefined constants\n * @type {Object}\n */\nconst constants = {\n  orientation: {\n    horizontal: {\n      dimension: 'width',\n      direction: 'left',\n      reverseDirection: 'right',\n      coordinate: 'x'\n    },\n    vertical: {\n      dimension: 'height',\n      direction: 'top',\n      reverseDirection: 'bottom',\n      coordinate: 'y'\n    }\n  }\n}\n\nclass Slider extends Component {\n  static propTypes = {\n    min: PropTypes.number,\n    max: PropTypes.number,\n    step: PropTypes.number,\n    value: PropTypes.number,\n    orientation: PropTypes.string,\n    type: PropTypes.string,\n    id: PropTypes.string,\n    tooltip: PropTypes.bool,\n    reverse: PropTypes.bool,\n    labels: PropTypes.object,\n    handleLabel: PropTypes.string,\n    format: PropTypes.func,\n    onChangeStart: PropTypes.func,\n    onChange: PropTypes.func,\n    onChangeComplete: PropTypes.func\n  };\n\n  static defaultProps = {\n    min: 0,\n    max: 100,\n    step: 1,\n    value: 0,\n    type: 'base',\n    orientation: 'horizontal',\n    tooltip: true,\n    reverse: false,\n    labels: {},\n    handleLabel: ''\n  };\n\n  constructor (props, context) {\n    super(props, context)\n\n    this.state = {\n      active: false,\n      limit: 0,\n      grab: 0\n    }\n  }\n\n  componentDidMount () {\n    this.handleUpdate()\n    const resizeObserver = new ResizeObserver(this.handleUpdate)\n    resizeObserver.observe(this.slider)\n  }\n\n  /**\n   * Format label/tooltip value\n   * @param  {Number} - value\n   * @return {Formatted Number}\n   */\n  handleFormat = value => {\n    const { format } = this.props\n    return format ? format(value) : value\n  };\n\n  /**\n   * Update slider state on change\n   * @return {void}\n   */\n  handleUpdate = () => {\n    if (!this.slider) {\n      // for shallow rendering\n      return\n    }\n    const { orientation } = this.props\n    const dimension = capitalize(constants.orientation[orientation].dimension)\n    const sliderPos = this.slider[`offset${dimension}`]\n    const handlePos = this.handle[`offset${dimension}`]\n\n    this.setState({\n      limit: sliderPos - handlePos,\n      grab: handlePos / 2\n    })\n  };\n\n  /**\n   * Attach event listeners to mousemove/mouseup events\n   * @return {void}\n   */\n  handleStart = e => {\n    const { onChangeStart, type } = this.props\n    document.addEventListener('mousemove', this.handleDrag)\n    document.addEventListener('mouseup', this.handleEnd)\n    this.setState(\n      {\n        active: true\n      },\n      () => {\n        onChangeStart && onChangeStart(e, type)\n      }\n    )\n  };\n\n  /**\n   * Handle drag/mousemove event\n   * @param  {Object} e - Event object\n   * @return {void}\n   */\n  handleDrag = e => {\n    e.stopPropagation()\n    const { onChange, type, id } = this.props\n    const { target: { className, classList, dataset } } = e\n    if (!onChange || className === 'rangeslider__labels') return\n\n    let value = this.position(e)\n\n    if (\n      classList &&\n      classList.contains('rangeslider__label-item') &&\n      dataset.value\n    ) {\n      value = parseFloat(dataset.value)\n    }\n\n    onChange && onChange(value, type, id, e)\n  };\n\n  /**\n   * Detach event listeners to mousemove/mouseup events\n   * @return {void}\n   */\n  handleEnd = e => {\n    const { onChangeComplete, type } = this.props\n    this.setState(\n      {\n        active: false\n      },\n      () => {\n        onChangeComplete && onChangeComplete(e, type)\n      }\n    )\n    document.removeEventListener('mousemove', this.handleDrag)\n    document.removeEventListener('mouseup', this.handleEnd)\n  };\n\n  /**\n   * Support for key events on the slider handle\n   * @param  {Object} e - Event object\n   * @return {void}\n   */\n  handleKeyDown = e => {\n    e.preventDefault()\n    const { keyCode } = e\n    const { value, min, max, step, onChange } = this.props\n    let sliderValue\n\n    switch (keyCode) {\n      case 38:\n      case 39:\n        sliderValue = value + step > max ? max : value + step\n        onChange && onChange(sliderValue, e)\n        break\n      case 37:\n      case 40:\n        sliderValue = value - step < min ? min : value - step\n        onChange && onChange(sliderValue, e)\n        break\n      default:\n        break\n    }\n  };\n\n  /**\n   * Calculate position of slider based on its value\n   * @param  {number} value - Current value of slider\n   * @return {position} pos - Calculated position of slider based on value\n   */\n  getPositionFromValue = value => {\n    const { limit } = this.state\n    const { min, max } = this.props\n    const diffMaxMin = max - min\n    const diffValMin = value - min\n    const percentage = diffValMin / diffMaxMin\n    const pos = Math.round(percentage * limit)\n\n    return pos\n  };\n\n  /**\n   * Translate position of slider to slider value\n   * @param  {number} pos - Current position/coordinates of slider\n   * @return {number} value - Slider value\n   */\n  getValueFromPosition = pos => {\n    const { limit } = this.state\n    const { orientation, min, max, step } = this.props\n    const percentage = clamp(pos, 0, limit) / (limit || 1)\n    const baseVal = step * Math.round(percentage * (max - min) / step)\n    const value = orientation === 'horizontal' ? baseVal + min : max - baseVal\n\n    return clamp(value, min, max)\n  };\n\n  /**\n   * Calculate position of slider based on value\n   * @param  {Object} e - Event object\n   * @return {number} value - Slider value\n   */\n  position = e => {\n    const { grab } = this.state\n    const { orientation, reverse } = this.props\n\n    const node = this.slider\n    const coordinateStyle = constants.orientation[orientation].coordinate\n    const directionStyle = reverse\n      ? constants.orientation[orientation].reverseDirection\n      : constants.orientation[orientation].direction\n    const clientCoordinateStyle = `client${capitalize(coordinateStyle)}`\n    const coordinate = !e.touches\n      ? e[clientCoordinateStyle]\n      : e.touches[0][clientCoordinateStyle]\n    const direction = node.getBoundingClientRect()[directionStyle]\n    const pos = reverse\n      ? direction - coordinate - grab\n      : coordinate - direction - grab\n    const value = this.getValueFromPosition(pos)\n\n    return value\n  };\n\n  /**\n   * Grab coordinates of slider\n   * @param  {Object} pos - Position object\n   * @return {Object} - Slider fill/handle coordinates\n   */\n  coordinates = pos => {\n    const { limit, grab } = this.state\n    const { orientation } = this.props\n    const value = this.getValueFromPosition(pos)\n    const position = this.getPositionFromValue(value)\n    const handlePos = orientation === 'horizontal' ? position + grab : position\n    const fillPos = orientation === 'horizontal'\n      ? handlePos\n      : limit - handlePos\n\n    return {\n      fill: fillPos,\n      handle: handlePos,\n      label: handlePos\n    }\n  };\n\n  renderLabels = labels => (\n    <ul\n      ref={sl => {\n        this.labels = sl\n      }}\n      className={cx('rangeslider__labels')}\n    >\n      {labels}\n    </ul>\n  );\n\n  render () {\n    const {\n      value,\n      orientation,\n      className,\n      tooltip,\n      reverse,\n      labels,\n      min,\n      max,\n      handleLabel\n    } = this.props\n    const { active } = this.state\n    const dimension = constants.orientation[orientation].dimension\n    const direction = reverse\n      ? constants.orientation[orientation].reverseDirection\n      : constants.orientation[orientation].direction\n    const position = this.getPositionFromValue(value)\n    const coords = this.coordinates(position)\n    const fillStyle = { [dimension]: `${coords.fill}px` }\n    const handleStyle = { [direction]: `${coords.handle}px` }\n    let showTooltip = tooltip && active\n\n    let labelItems = []\n    let labelKeys = Object.keys(labels)\n\n    if (labelKeys.length > 0) {\n      labelKeys = labelKeys.sort((a, b) => (reverse ? a - b : b - a))\n\n      for (let key of labelKeys) {\n        const labelPosition = this.getPositionFromValue(key)\n        const labelCoords = this.coordinates(labelPosition)\n        const labelStyle = { [direction]: `${labelCoords.label}px` }\n\n        labelItems.push(\n          <li\n            key={key}\n            className={cx('rangeslider__label-item')}\n            data-value={key}\n            onMouseDown={this.handleDrag}\n            onTouchStart={this.handleStart}\n            onTouchEnd={this.handleEnd}\n            style={labelStyle}\n          >\n            {this.props.labels[key]}\n          </li>\n        )\n      }\n    }\n\n    return (\n      <div\n        ref={s => {\n          this.slider = s\n        }}\n        className={cx(\n          'rangeslider',\n          `rangeslider-${orientation}`,\n          { 'rangeslider-reverse': reverse },\n          className\n        )}\n        onMouseDown={this.handleDrag}\n        onMouseUp={this.handleEnd}\n        onTouchStart={this.handleStart}\n        onTouchEnd={this.handleEnd}\n        aria-valuemin={min}\n        aria-valuemax={max}\n        aria-valuenow={value}\n        aria-orientation={orientation}\n      >\n        <div className='rangeslider__fill' style={fillStyle} />\n        <div\n          ref={sh => {\n            this.handle = sh\n          }}\n          className='rangeslider__handle'\n          onMouseDown={this.handleStart}\n          onTouchMove={this.handleDrag}\n          onTouchEnd={this.handleEnd}\n          onKeyDown={this.handleKeyDown}\n          style={handleStyle}\n          tabIndex={0}\n        >\n          {showTooltip\n            ? <div\n              ref={st => {\n                this.tooltip = st\n              }}\n              className='rangeslider__handle-tooltip'\n              >\n              <span>{this.handleFormat(value)}</span>\n            </div>\n            : null}\n          <div className='rangeslider__handle-label'>{handleLabel}</div>\n        </div>\n        {labels ? this.renderLabels(labelItems) : null}\n      </div>\n    )\n  }\n}\n\nexport default Slider","import React, {useState, useEffect} from 'react'\nimport {Row, Col, ToggleButton, ButtonGroup, InputGroup, FormControl} from 'react-bootstrap'\nimport Slider from \"./rangeSlider\"\nimport * as dataUtils from '../util/dataProcessor';\n\nexport default function InputParameter(props){\n\n    const{header, id, type, value, min, max, step, tooltips, onValueChange} = props\n    const[inputText, setInputText] = useState(value)\n    const[switchStatus, setSwitchStatus] = useState(\"false\")\n\n    const radios = [\n        { name: 'Input', value: \"false\"},\n        { name: 'Slider', value: \"true\"},\n      ];\n\n    //use effect hook to modify the selected option and rerender this component \n    //whenever the parent value is changed.\n    useEffect(() => {\n        if(value !== inputText) {\n            setInputText(value);\n        }\n    },[value, inputText])\n\n    const valueChangeHandler = (e) => {\n        let val = e.target.value\n\n        if(val.length === 0){\n            val = \"0\"\n        }\n\n        if(val.endsWith(\".\") && val.split(\".\").length === 2){\n            let output = parseFloat(val.replaceAll(\",\",\"\"))\n            let formated_output_str = dataUtils.format_num_to_string(output, 0)\n            onValueChange(formated_output_str+\".\", type, id)\n        }else if(/^[0-9.,]+$/.test(val)){\n            let digits = val.indexOf('.') > -1 ? val.split(\".\")[1].length : 0\n            let output = parseFloat(val.replaceAll(\",\",\"\"))\n            let formated_output_str = dataUtils.format_num_to_string(output, digits)\n            onValueChange(formated_output_str, type, id)\n        }\n    }\n\n    function conditionalRender(){\n\n        if(switchStatus===\"true\"){\n            return (\n                <>\n                    <p style={{marginTop:\"12px\"}}><strong style={{marginLeft:\"5px\"}}>{min}</strong><strong className={\"pull-right\"} style={{marginRight:\"5px\"}}>{max}</strong></p>\n                    <Slider\n                        value={value} \n                        onChange={onValueChange}\n                        step={step}\n                        max={max}\n                        min={min}\n                        type={type}\n                        id={id}\n                        orientation=\"horizontal\"\n                        reversed={true}\n                        >\n                    </Slider>\n                </>\n            )\n        }else{\n            return(\n                <>\n                    <InputGroup style={{marginTop:\"20px\", marginBottom: \"10px\"}}>\n                        <InputGroup.Text><strong>{min}</strong></InputGroup.Text>\n                            <FormControl id={id} value={inputText} onChange={valueChangeHandler}></FormControl>\n                        <InputGroup.Text><strong>{max}</strong></InputGroup.Text>\n                    </InputGroup>\n                </>\n            )\n        }\n    }\n\n    return(\n        <Row>\n            <Col>\n                <Row>\n                    <Col xs={8}>\n                        <h6 data-toggle=\"tooltip\" data-placement=\"top\" title={tooltips} style={{marginTop:\"5px\"}}>{header}</h6>\n                    </Col>\n                    <Col xs={4}>\n                        <ButtonGroup className=\"pull-right\">\n                            {\n                                radios.map((radio, idx) => (\n                                    <ToggleButton\n                                        key={`${id}-key-${idx}`}\n                                        id={`${id}-${idx}`}\n                                        type=\"radio\"\n                                        size=\"sm\"\n                                        variant={idx%2 ? 'outline-success': 'outline-danger'}\n                                        name= {id}\n                                        value={radio.value}\n                                        checked={switchStatus === radio.value}\n                                        onChange={(e) => setSwitchStatus(e.currentTarget.value)}\n                                    >\n                                        {radio.name}\n                                    </ToggleButton>\n                                ))\n                            }\n                        </ButtonGroup>\n                    </Col>\n                </Row>\n                {\n                    conditionalRender()\n                }\n            </Col>\n        </Row>\n    );\n}","import React, {useEffect, useState} from 'react'\nimport OptionParameter from './optionParameter';\nimport * as dataUtils from '../util/dataProcessor'\nimport {ScenarioContext, ProjectContext} from \"../store/index\";\nimport {getDefaultDataForStandard} from '../util/dataProcessor'\nimport {ListGroup} from \"react-bootstrap\"\nimport InputParameter from \"./inputParameter\"\n\n//this class hold the list of data\nexport default function InputForm(props){\n\n    const {id, onOutputChange, name} = props\n    //TODO keep it for now, maybe can remove it later.\n    const [state, dispatch] = React.useContext(ScenarioContext)\n    const {bldgType, climateZone} = React.useContext(ProjectContext)\n    const parameterMeta = dataUtils.getParameterMetaData()\n    const defaultData = () => {\n        if(state.hasOwnProperty(id)){\n            return state[id]\n        }else{\n            //in this case, we are creating a new scenario\n            let tempData = dataUtils.getDefaultDataForStandard(parameterMeta['standard']['default'], bldgType, climateZone)\n            let keys = Object.keys(parameterMeta)\n            for(var i=0; i<keys.length; i++){\n                let key = keys[i]\n                if(parameterMeta[key]['type'] === 'option'){\n                    let optionType = parameterMeta[key]['optionsKey']\n                    let optionArray = dataUtils.getData(optionType, bldgType, climateZone)\n                    tempData[key] = optionArray.filter(option=>option['value'] === parameterMeta[key]['default'])[0]\n                    if(tempData[key] === undefined){\n                        //in this case, it is probably wrong default assigned for HVAC, change it to a new default\n                        tempData[key] = optionArray[0]\n                    }\n                }\n            }\n            return tempData\n        }\n    }\n\n    const defaultArray = defaultData()\n    const [dataArray, setDataArray] = useState(defaultArray)\n\n    const handleValueChange = (value, type, id) => {\n        let newDataArray = {}\n        if(type === \"option\"){\n            let optionType = parameterMeta[id]['optionsKey']\n            let optionArray = dataUtils.getData(optionType, bldgType, climateZone)\n            //we pick the first one found in the options\n            value = optionArray.filter(option=>option['value'] === value)[0]\n        }\n\n        if(id === \"standard\"){\n            //in this case, we need to update the entire dta set.\n            if(value['value'] === 'custom'){\n                newDataArray = {\n                    ...dataArray,\n                    [id]: value\n                }\n            }else{\n                let defaultData = getDefaultDataForStandard(value['value'], bldgType, climateZone)\n                newDataArray = {\n                    ...defaultData\n                }\n            }\n        } else{\n            newDataArray = {\n                ...dataArray,\n                [id]: value\n            }\n        }\n        setDataArray(newDataArray)\n    }\n\n    useEffect(()=>{\n        onOutputChange(dataArray, 'design', name)\n    }, [dataArray])\n\n    return (\n        <>\n        <ListGroup >\n            {Object.keys(parameterMeta).sort(function(a,b){\n                return parameterMeta[a].rank - parameterMeta[b].rank\n            }).map((sortedKey) => {\n                let meta = parameterMeta[sortedKey]\n                let header = meta['header']\n                let id = meta['id']\n                let type = meta['type']\n                let tooltips = meta['tool_tip']\n                if(type === 'option'){\n                    let optionUpdateMessage=meta[\"optionUpdateMessage\"]\n                    let optionType = meta['optionsKey']\n                    let optionArray = dataUtils.getData(optionType, bldgType, climateZone)\n                    if(optionArray.length > 0){\n                        return (\n                            <ListGroup.Item>                     \n                                <OptionParameter header={header} id={id} type={type} value={dataArray[id]} options={optionArray} tooltips={tooltips} alertMessage={optionUpdateMessage} onValueChange={handleValueChange}></OptionParameter>\n                            </ListGroup.Item>\n                        );\n                    }\n                }else{\n                    let unit = meta['unit']\n                    let min = meta['min']\n                    let max = meta['max']\n                    //set each variable 100 steps\n                    let step = (max-min) / 100\n                    header = unit? header + \" (\" + unit + \")\": header;\n                    return (\n                        <ListGroup.Item>\n                            <InputParameter\n                                header={header}\n                                id={id}\n                                type={type}\n                                value={dataArray[id]}\n                                min={min}\n                                max={max}\n                                step={step}\n                                tooltips={tooltips}\n                                onValueChange={handleValueChange}\n                            \n                            ></InputParameter>\n                        </ListGroup.Item>\n                    )\n                }\n            })}\n        </ListGroup>\n        </>\n    );\n}","import React, {useEffect, useState} from 'react'\nimport Plot from 'react-plotly.js'\n\n\nexport default function CustomBarChart(props){\n  const {plotData, barmode, unit, title} = props\n  const [plotDataList, setPlotDataList] = useState(Object.values(plotData))\n  useEffect(()=>{\n    let plotDataArray = Object.values(plotData)\n    setPlotDataList(plotDataArray)\n  }, [plotData])\n\n  const layout = {\n    barmode: barmode,\n    title:{\n      text: title,\n    },\n    yaxis:{\n      title:{\n        text: unit,\n      }\n    }\n  }\n    return (\n        <div>\n          <Plot\n            data={plotDataList}\n            layout={layout}\n            style={{width: \"100%\", height: \"100%\"}}\n          />\n        </div>\n    );\n} ","import React, { useState, useEffect } from 'react'\nimport { useTable } from 'react-table'\nimport styled from 'styled-components'\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\nexport default function CustomTable(props){\n    const {columns, data} = props\n    const [tableData, setTableData] = useState(Object.values(data))\n    \n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n      } = useTable({\n        columns,\n        data: tableData,\n      })\n\n    useEffect(()=>{\n        let tableDataArray = Object.values(data)\n        setTableData(tableDataArray)\n      }, [data])\n\n    // render the table UI\n    return(\n        <Styles>\n        <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n    </Styles>\n    )\n}","import React, {useState} from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport Select from \"react-select\"\n\nexport function CustomModal(props){\n\n    const {buttonVariant, buttonSize, buttonStyle, buttonText, modalTitle, createAction, closeText, confirmText, options} = props\n    const [inputText, setInputText] = useState(buttonText)\n    const [selectValue, setSelectValue] = useState(options[0])\n\n    const[show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const handleCreate = () => {createAction(inputText, selectValue); handleClose()};\n\n    const handleOptionChange = (e) => {\n        setSelectValue(e)\n    }\n\n    return (\n        <>\n            <Button variant={buttonVariant} size={buttonSize} style={buttonStyle} onClick={handleShow}>{buttonText}</Button>\n            <Modal show={show} size=\"lg\" onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{modalTitle}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h4>Scenario name </h4>\n                    <input className=\"form-control\" value={inputText} onChange={(e)=>{setInputText(e.target.value)}}></input>\n                    <h4 style={{\"marginTop\": \"25px\"}}>Select a baseline</h4>\n                    <Select \n                        options={[...options]}\n                        name={\"Select A Baseline\"}\n                        value={selectValue}\n                        onChange={handleOptionChange}></Select>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        {closeText}\n                    </Button>\n                    <Button variant=\"primary\" onClick={handleCreate}>\n                        {confirmText}\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n\n}","import React, {useState, useEffect} from \"react\";\nimport {ProjectContext, ScenarioContext, ScenarioListContext, AdvancedConfigContext} from \"../store/index\";\nimport InputForm from \"../components/inputForm\";\nimport CustomBarChart from \"../components/customBarChart\";\nimport CustomTable from \"../components/customTable\";\nimport { Row, Col, Button, Card, Modal } from \"react-bootstrap\";\nimport * as dataUtils from \"../util/dataProcessor.jsx\";\nimport * as alg from '../util/algorithmLoader.jsx'\nimport {Link, useParams, useNavigate} from \"react-router-dom\"\nimport {CustomModal} from '../components/customModal'\nimport Select from \"react-select\"\nimport {useSpring, animated} from \"react-spring\"\n\n//GLOBAL CONSTANTE / Enum\nconst tableInit = {\n  base: {\n    rowName: \"base\",\n    \"Electricity-Auxiliary\": 2.35,\n    \"Electricity-Cooling\": 1.08,\n    \"Electricity-General\": 21.58,\n    \"Electricity-Heating\": 7.32,\n    \"Natural Gas-Heating\": 4.93,\n    total: 0.0,\n  },\n  design: {\n    rowName: \"design\",\n    \"Electricity-Auxiliary\": 0.0,\n    \"Electricity-Cooling\": 0.0,\n    \"Electricity-General\": 0.0,\n    \"Electricity-Heating\": 0.0,\n    \"Natural Gas-Heating\": 0.0,\n    total: 0.0,\n  },\n  savings: {\n    rowName: \"Savings\",\n    \"Electricity-Auxiliary\": 0.0,\n    \"Electricity-Cooling\": 0.0,\n    \"Electricity-General\": 0.0,\n    \"Electricity-Heating\": 0.0,\n    \"Natural Gas-Heating\": 0.0,\n    total: 0.0,\n  },\n  savePercent: {\n    rowName: \"Percent Savings\",\n    \"Electricity-Auxiliary\": 0.0,\n    \"Electricity-Cooling\": 0.0,\n    \"Electricity-General\": 0.0,\n    \"Electricity-Heating\": 0.0,\n    \"Natural Gas-Heating\": 0.0,\n    total: 0.0,\n  },\n};\n\nfunction Design() {\n  const navigate = useNavigate()\n  const {scenarioId}= useParams()\n\n  //animation style\n  const fadeInRight = useSpring({\n    opacity: 1,\n    config: {mass:1, tension:20, friction:3, clamp: true},\n    transform: \"translate(0px, 0px)\",\n    from: { opacity: 0, transform: \"translate(20px, 0px)\" }\n  });\n\n  const fadeInLeft = useSpring({\n    opacity: 1,\n    config: {mass:1, tension:20, friction:3, clamp: true},\n    transform: \"translate(0px, 0px)\",\n    from: { opacity: 0, transform: \"translate(-20px, 0px)\" }\n  });\n\n  //modal function\n  const[show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  //GLOBAL STATES\n  const {bldgType, climateZone, currentWorkingScenario, setCurrentWorkingScenario, floorArea, currentBaseCase, setCurrentBaseCase} = React.useContext(ProjectContext)\n  const {electricityRate,natGasRate,electricityCarbon,natGasCarbon,electricitySourceToSite,natGasSourceToSite} = React.useContext(AdvancedConfigContext)\n  const [scenarioState, scenarioDispatch] = React.useContext(ScenarioContext)\n  const [scenarioListState, scenarioListDispatch] = React.useContext(ScenarioListContext)\n\n  let defaultArray = (scenarioState.hasOwnProperty(scenarioId))? scenarioState[scenarioId]: {}\n  //let defaultBaseCaseTemp = (scenarioListState.cases.length > 0)? {\"value\": scenarioListState.cases[0].id, \"label\": scenarioListState.cases[0].name}: {\"value\":\"\", \"label\": \"\"}\n  //let defaultBaseCase = dataUtils.getDefaultDataForStandard('ashrae9012019', bldgType, climateZone)\n  let defaultBaseCase = scenarioState[currentBaseCase]\n  // check if the design is in the existing cases, if so, update the current working scenario\n  let tempScenarioName = dataUtils.getScenarioNameByID(scenarioListState.cases, scenarioId)\n  if(tempScenarioName !== null && currentWorkingScenario !== tempScenarioName){\n    setCurrentWorkingScenario(tempScenarioName)\n  }else{\n    tempScenarioName = currentWorkingScenario\n  }\n\n  //local state to set base case for generating tornado diagram\n  //TODO \n  const analysisTypeArray = dataUtils.getAnalysisType()\n  const [baseCase, setBaseCase] = useState(defaultBaseCase)\n  const [dataArray, setDataArray] = useState(defaultArray)\n  const [scenarioName, setScenarioName] = useState(tempScenarioName)\n  const [analysisType, setAnalysisType] = useState(analysisTypeArray[0])\n  const [electricConvertFactor, setElectricConvertFactor] = useState(1.0)\n  const [natGasConvertFactor, setNatGasConvertFactor] = useState(1.0)\n  //VISUAL DATA STATES\n  const [plotData, setPlotData] = useState(dataUtils.makeBasePlotData(scenarioListState.cases.filter(scenario => scenario[\"id\"] === currentBaseCase)[0]));\n\n  const [tableData, setTableData] = useState(tableInit);\n  const tableColumns = React.useMemo(() => dataUtils.makeTableColumn());\n\n  //update the currentState (the list of the scenarios)\n  //used for duplicate case\n  useEffect(()=>{\n    if(scenarioName !== currentWorkingScenario){\n      setCurrentWorkingScenario(scenarioName)\n      //Need to update the design scenario Name\n      handleOutputChange(dataArray, \"design\", scenarioName)\n    }\n  }, [scenarioName])\n\n  \n  //Updates graph\n  const updateGraph = (keyWord, output, name) => {\n    //update the graph\n    let x_array = [];\n    let y_array = [];\n    for (let key in output) {\n      y_array.push(output[key]);\n      x_array.push(key);\n    }\n\n    var trace = {\n      x: x_array,\n      y: y_array,\n      name: name,\n      type: \"bar\",\n    };\n\n    const plotDataTemp = { ...plotData };\n    if (keyWord in plotData) {\n      //NESTED STATE UPDATE METHOD\n      plotDataTemp[keyWord].x = x_array;\n      plotDataTemp[keyWord].y = y_array;\n      if(name !== undefined){\n        plotDataTemp[keyWord].name = name;\n      }\n      setPlotData(plotDataTemp);\n    } else {\n      //this code will only be called when initializing the page\n      plotDataTemp[keyWord] = trace;\n      setPlotData(plotDataTemp);\n    }\n\n    //update table\n    const tableDataTemp = { ...tableData };\n    if (keyWord in tableData) {\n      for (let key in output) {\n        tableDataTemp[keyWord][key] = output[key];\n      }\n      tableDataTemp[keyWord][\"rowName\"] = keyWord;\n    } else {\n      //this code will only be called when initializing the page\n      output[\"rowName\"] = keyWord;\n      tableDataTemp[keyWord] = output;\n    }\n    dataUtils.makeTableData(tableDataTemp);\n    setTableData(tableDataTemp);\n  }\n\n  // output is the calculated energy consumption\n  // keyWord is design or base\n  const handleOutputChange = (value, keyWord, name) => {\n    //calculate the output:\n    let output = {}\n    if(keyWord === 'design'){\n      output['Electricity-General'] = alg.calculateGen(bldgType.value, climateZone.value, value, electricConvertFactor)\n      output['Electricity-Auxiliary'] = alg.calculateAux(bldgType.value, climateZone.value, value, electricConvertFactor)\n      output['Electricity-Cooling'] = alg.calculateCool(bldgType.value, climateZone.value, value, electricConvertFactor)\n      output['Electricity-Heating'] = alg.calculateELHeat(bldgType.value, climateZone.value, value, electricConvertFactor)\n      output['Natural Gas-Heating'] = alg.calculateNGHeat(bldgType.value, climateZone.value, value, natGasConvertFactor)\n  \n      //update the dataArray\n      let newDataArray = {\n          ...dataArray,\n          ...value\n      }\n      setDataArray(newDataArray)\n    }else{\n      //its base case - update output to basecase\n      //in this case, the value is the key to the scenario list\n      //const results = scenarioListState.cases.filter(scenario => scenario.id === value)[0]\n      output['Electricity-General'] = alg.calculateGen(bldgType.value, climateZone.value, value, electricConvertFactor)\n      output['Electricity-Auxiliary'] = alg.calculateAux(bldgType.value, climateZone.value, value, electricConvertFactor)\n      output['Electricity-Cooling'] = alg.calculateCool(bldgType.value, climateZone.value, value, electricConvertFactor)\n      output['Electricity-Heating'] = alg.calculateELHeat(bldgType.value, climateZone.value, value, electricConvertFactor)\n      output['Natural Gas-Heating'] = alg.calculateNGHeat(bldgType.value, climateZone.value, value, natGasConvertFactor)\n  \n      let newBaseCase = {\n        ...baseCase,\n        ...value\n      }\n      setBaseCase(newBaseCase)\n    }\n    updateGraph(keyWord, output, name)\n    \n  };\n\n  //CONDITIONAL rendering to prevent link guessing\n  if(bldgType===undefined && climateZone === undefined){\n    //prevent rendering if global variables are empty\n    return(<></>)\n  }\n\n  //Reducer DISPTACHER function\n  const dispatchCombined = () => {\n    if(scenarioState.hasOwnProperty(scenarioId)){\n      scenarioDispatch({type:\"modify\", payload: dataArray, key:scenarioId})\n    }else{\n      scenarioDispatch({type:\"add\", payload: dataArray, key: scenarioId})\n    }\n\n    const scenarioList = scenarioListState.cases.filter(scenario => scenario.id === scenarioId)\n    let payLoad = {}\n    const dateTime = new Date()\n    if(scenarioList === undefined || scenarioList.length === 0){\n      payLoad[\"id\"] = scenarioId\n      payLoad['name'] = scenarioName\n      payLoad['status'] = \"active\"\n      payLoad['type'] = \"user\"\n      payLoad['time'] = dateTime.toISOString()\n\n      payLoad['Electricity-General'] = alg.calculateGen(bldgType.value, climateZone.value, dataArray)\n      payLoad['Electricity-Auxiliary'] = alg.calculateAux(bldgType.value, climateZone.value, dataArray)\n      payLoad['Electricity-Cooling'] = alg.calculateCool(bldgType.value, climateZone.value, dataArray)\n      payLoad['Electricity-Heating'] = alg.calculateELHeat(bldgType.value, climateZone.value, dataArray)\n      payLoad['Natural Gas-Heating'] = alg.calculateNGHeat(bldgType.value, climateZone.value, dataArray)\n\n      payLoad['eui'] = dataUtils.fixed_2(payLoad['Electricity-General'] + payLoad['Electricity-Auxiliary'] + \n        payLoad['Electricity-Cooling'] + payLoad['Electricity-Heating'] +\n        payLoad['Natural Gas-Heating'])\n      payLoad['unit'] = \"kBtu/ft2-year\"\n      scenarioListDispatch({type:\"add\", payload: payLoad})\n    }else{\n      //in this case, we only update the time and eui\n      payLoad['time'] = dateTime.toISOString()\n      payLoad['name'] = scenarioName\n      payLoad['Electricity-General'] = alg.calculateGen(bldgType.value, climateZone.value, dataArray)\n      payLoad['Electricity-Auxiliary'] = alg.calculateAux(bldgType.value, climateZone.value, dataArray)\n      payLoad['Electricity-Cooling'] = alg.calculateCool(bldgType.value, climateZone.value, dataArray)\n      payLoad['Electricity-Heating'] = alg.calculateELHeat(bldgType.value, climateZone.value, dataArray)\n      payLoad['Natural Gas-Heating'] = alg.calculateNGHeat(bldgType.value, climateZone.value, dataArray)\n      payLoad['eui'] = dataUtils.fixed_2(payLoad['Electricity-General'] + payLoad['Electricity-Auxiliary'] + \n        payLoad['Electricity-Cooling'] + payLoad['Electricity-Heating'] +\n        payLoad['Natural Gas-Heating'])\n      scenarioListDispatch({type:\"modify\", payload:payLoad, key:scenarioId})\n    }\n  }\n\n  const handleChangeScenarioNameAndBaseCase = (e, baseObject) => {\n    setScenarioName(e)\n    let scenario = scenarioState[baseObject[\"value\"]]\n    handleOutputChange(scenario, \"base\", baseObject[\"label\"])\n  }\n\n  const handleChangeAnalysisType = (value) => {\n    if(value['value'] !== analysisType['value']){\n      setAnalysisType(value)\n    }\n    let tempElectricFactor = dataUtils.getElectricConversionFactor(value[\"value\"], floorArea, electricitySourceToSite[\"value\"],electricityCarbon[\"value\"], electricityRate[\"value\"])\n    let tempNatGasFactor = dataUtils.getNatGasConversionFactor(value[\"value\"], floorArea, natGasSourceToSite[\"value\"], natGasCarbon[\"value\"], natGasRate[\"value\"])\n\n    let output={ }\n    output['Electricity-General'] = alg.calculateGen(bldgType.value, climateZone.value, dataArray, tempElectricFactor)\n    output['Electricity-Auxiliary'] = alg.calculateAux(bldgType.value, climateZone.value, dataArray, tempElectricFactor)\n    output['Electricity-Cooling'] = alg.calculateCool(bldgType.value, climateZone.value, dataArray, tempElectricFactor)\n    output['Electricity-Heating'] = alg.calculateELHeat(bldgType.value, climateZone.value, dataArray, tempElectricFactor)\n    output['Natural Gas-Heating'] = alg.calculateNGHeat(bldgType.value, climateZone.value, dataArray, tempNatGasFactor)\n\n    updateGraph('design', output)\n\n    //update base case\n    output['Electricity-General'] = alg.calculateGen(bldgType.value, climateZone.value, baseCase, tempElectricFactor)\n    output['Electricity-Auxiliary'] = alg.calculateAux(bldgType.value, climateZone.value, baseCase, tempElectricFactor)\n    output['Electricity-Cooling'] = alg.calculateCool(bldgType.value, climateZone.value, baseCase, tempElectricFactor)\n    output['Electricity-Heating'] = alg.calculateELHeat(bldgType.value, climateZone.value, baseCase, tempElectricFactor)\n    output['Natural Gas-Heating'] = alg.calculateNGHeat(bldgType.value, climateZone.value, baseCase, tempNatGasFactor)\n\n    updateGraph('base', output)\n\n    \n    setElectricConvertFactor(tempElectricFactor)\n    setNatGasConvertFactor(tempNatGasFactor)\n  }\n\n  return (\n    <>\n      <Row>\n        <Col xs={6}>\n          <CustomModal\n              buttonVariant={\"secondary\"}\n              buttonSize={\"\"}\n              buttonStyle={{}}\n              buttonText={scenarioName}\n              modalTitle={\"Enter a new name for the scenario\"}\n              createAction={handleChangeScenarioNameAndBaseCase}\n              closeText={\"Close\"}\n              confirmText={\"Confirm\"}\n              options={dataUtils.convert_scenario_list_to_option_list(scenarioListState)}\n            >\n            </CustomModal>\n        </Col>\n        <Col xs={6}>\n          <Link to=\"/scenario\"><Button className=\"pull-right\" variant=\"warning\" id=\"exit\" onClick={dispatchCombined} style={{marginRight:\"26px\"}}>Exit</Button></Link>\n          <Button className=\"pull-right\" variant=\"danger\" id=\"cancel\" onClick={()=>{if(window.confirm(\"Do you want to cancel your changes?\")){navigate('/scenario')}}}>Cancel</Button>\n          <Button className=\"pull-right\" variant=\"success\" id=\"save\" onClick={dispatchCombined}>Save</Button>{' '}\n        </Col>\n      </Row>\n      <Row>\n      <div className=\"row align-items-md-stretch\">\n        <animated.div className=\"col-md-6\" style={fadeInLeft}>\n          <Card style={{height: \"1280px\"}}>\n            <div className={\"scrollable\"}>\n              <Card.Body>\n                <InputForm\n                id={scenarioId}\n                onOutputChange={handleOutputChange}\n                key={scenarioId}\n                name={scenarioName}\n              />\n              </Card.Body>\n            </div>\n          </Card>\n        </animated.div>\n        <animated.div className=\"col-md-6\" style={fadeInRight}>\n          <Row>\n            <Col>\n            <Select \n              options={[...analysisTypeArray]} \n              name={\"analysis_type\"} \n              value={analysisType}\n              onChange={handleChangeAnalysisType}></Select>\n            </Col>\n          </Row>\n          <div className=\"card\">\n            <CustomBarChart plotData={plotData} barmode={\"group\"} unit={`${analysisType['label']} [${dataUtils.getAnalysisTypeUnit(analysisType['value'])}]`} title={analysisType['label']}/>\n          </div>\n          <div className=\"icard\" style={{marginBottom: \"0px\"}}>\n            <div className=\"icard-title\">\n              <h3>Legend</h3>\n            </div>\n            <div className=\"icard-content\">\n            <p><strong>Electricity General:</strong> Include interior lighting, exterior lighting, interior equipment, exterior equipment, refrigeration, generators.</p>\n                  <p><strong>Electricity HVAC Auxiliary:</strong> Include fans, pumps and heat recovery.</p>\n                  <p><strong>Space Cooling:</strong> Include cooling and heat rejection.</p>\n                  <p><strong>Electricity space heating:</strong> Heating and Humidification.</p>\n                  <p><strong>Natural Gas space heating:</strong> Heating.</p>\n            </div>\n          </div>\n          <div className={\"icard\"}>\n            <div className={\"icard-title\"}>\n              <h3>Table</h3>\n              <Button variant=\"success\" onClick={handleShow} className={\"pull-right\"}>Help</Button>\n              <Modal show={show} size=\"lg\" onHide={handleClose}>\n                <Modal.Header closeButton>\n                  <Modal.Title>How to?</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                  <p><strong>Electricity General:</strong> Include interior lighting, exterior lighting, interior equipment, exterior equipment, refrigeration, generators.</p>\n                  <p><strong>Electricity HVAC Auxiliary:</strong> Include fans, pumps and heat recovery.</p>\n                  <p><strong>Space Cooling:</strong> Include cooling and heat rejection.</p>\n                  <p><strong>Electricity space heating:</strong> Heating and Humidification.</p>\n                  <p><strong>Natural Gas space heating:</strong> Heating.</p>\n                </Modal.Body>\n                <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                      Close\n                  </Button>\n                </Modal.Footer>\n              </Modal>\n            </div>\n            <div className=\"icard-content\">\n              <CustomTable columns={tableColumns} data={tableData} />\n            </div>\n          </div>\n        </animated.div>\n      </div>\n      </Row>\n    </>\n  );\n}\n\nexport default Design;","import React from 'react'\nimport {Badge} from 'react-bootstrap'\n\nexport default function CustomBadge(props){\n    if(props.status === \"inactive\"){\n        return (\n            <Badge bg=\"success\">Done</Badge>\n        );\n    }else if(props.status === \"active\"){\n        return (\n            <Badge bg=\"primary\">Active</Badge>\n        );\n    }\n    return (\n        <Badge bg=\"warning\">Error</Badge>\n    )\n}","import React from 'react'\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport {Link} from \"react-router-dom\"\n\nexport default function CustomListDropDownButton(props){\n    const {dataKey, changeHandler} = props\n\n    return (\n        <DropdownButton title=\"Options\" variant=\"outline-primary\">\n            <Dropdown.Item as={Link} to={`/design/${dataKey}`}>Edit</Dropdown.Item>\n            <Dropdown.Item onClick={()=>changeHandler('dup', dataKey)}>Duplicate</Dropdown.Item>\n            <Dropdown.Divider></Dropdown.Divider>\n            <Dropdown.Item onClick={() => changeHandler(\"del\", dataKey)}>Archive</Dropdown.Item>\n        </DropdownButton>\n    )\n}","import React, { useState, useContext, useEffect } from 'react'\nimport {ListGroup} from 'react-bootstrap'\nimport CustomBadge from './customBadge';\nimport CustomListDropDownButton from './customListDropDownButton'\nimport {ScenarioListContext, ScenarioContext} from \"../store/index\";\nimport {genID, strTruncate} from '../util/strUtil'\n\nexport default function CustomListGroupItem(props){\n    const {valueStatus, displayStatus, handleMouseClick} = props\n    const [scenarioListSate, scenarioListDispatch] = useContext(ScenarioListContext)\n    const [scenario, scenarioDispatch] = useContext(ScenarioContext)\n    const [showScenario, setShowScenario] = useState(valueStatus.status)\n\n    const requestHandler = (e, id) => {\n        if(e === 'del'){\n            scenarioListDispatch({type:'del', payload: id})\n        }else if(e==='dup'){\n            const newKey = genID()\n            scenarioDispatch({type: 'duplicate', key: id, newKey: newKey})\n            scenarioListDispatch({type:'duplicate', payload: id, newKey: newKey})\n        }\n    }\n\n    //update each individual scenario display / none status.\n    //used for delete case\n    useEffect(()=>{\n        if(valueStatus.status !== showScenario){\n            setShowScenario(valueStatus.status)\n        }\n      }, [valueStatus.status, showScenario])\n\n    const handleClick = (e) => {\n        handleMouseClick(valueStatus)\n    }\n\n    return (\n        <>\n            <ListGroup.Item as=\"li\" action onClick={handleClick} style={{display: showScenario === 'inactive' && displayStatus === '1' ? 'none' : 'block'}}>\n                <div className=\"d-flex justify-content-between align-items-start\">\n                    <CustomBadge status={valueStatus.status}></CustomBadge>\n                    <div className=\"ms-2\">\n                        <p className=\"fw-bold\" style={{overflow: 'hidden', textOverflow:'ellipsis', marginBottom: '0px'}} data-toggle=\"tooltip\" data-placement=\"top\" title={valueStatus.name}>{strTruncate(valueStatus.name, 22)}</p>\n                        <p style={{marginBottom: '0px'}}><small>{valueStatus.time}</small></p>\n                    </div>\n                    <div>\n                        <p style={{marginBottom: '0px'}}>{valueStatus.eui} ({valueStatus.unit})</p>\n                    </div>\n                    <div>\n                        <CustomListDropDownButton dataKey={valueStatus.id} changeHandler={requestHandler}/>\n                    </div>\n                </div>\n            </ListGroup.Item>\n        </>\n    );\n}","import React from 'react';\n\nconst Scroll = (props) => {\n    return( \n      <div style={{overflowY: 'scroll', height:'70vh'}}>\n        {props.children}\n      </div>\n    );\n  }\n\nexport default Scroll","import React from 'react'\nimport Plot from 'react-plotly.js'\n\nexport default function CustomPieChart(props){\n    const{scenarioData, scenarioLabels, width, height, colors} = props\n\n    var data = [\n        {\n            values: scenarioData,\n            labels: scenarioLabels,\n            type: 'pie',\n            textinfo: \"label+percent\",\n            insidetextorientation: \"radial\",\n            marker:{colors: colors}\n        }\n    ]\n\n    return (\n        <div>\n          <Plot \n            data={data}\n            layout={{autosize:false, \n                      width: width, \n                      height: height, \n                      margin: {\"t\": 40, \"b\": 0, \"l\": 0, \"r\":0}, \n                      legend: {yanchor: \"top\", y: 1, x: -0.3},\n                      font: {family: \"Segoe UI\", size:13}}}\n            config={{displaylogo: false}}\n          />\n        </div>\n    )\n}","import React, {useState, useContext} from \"react\";\nimport {ProjectContext } from \"../store/index\";\nimport {Card, Row, Col, ListGroup, Form, FormControl, Container, InputGroup, ButtonGroup, ToggleButton, Table, DropdownButton, Dropdown} from \"react-bootstrap\"\nimport {ScenarioListContext} from \"../store/index\";\nimport CustomListGroupItem from \"../components/customListGroupItem\";\nimport {useNavigate} from \"react-router-dom\"\nimport {genID} from '../util/strUtil'\nimport {CustomModal} from '../components/customModal'\nimport { useEffect } from \"react\";\nimport * as dataUtils from \"../util/dataProcessor\"\nimport {useSpring, animated} from \"react-spring\";\nimport Scroll from \"../components/scroll\"\nimport CustomPieChart from '../components/customPieChart';\n\nconst scenarioStatus=[\n  {name: 'Active', value: '1'},\n  {name: 'All', value: '2'}\n]\n\nfunction Scenario() {\n  //SET UPS\n  //animation style\n  const fadeInRight = useSpring({\n    opacity: 1,\n    config: {mass:1, tension:20, friction:3, clamp: true},\n    transform: \"translate(0px, 0px)\",\n    from: { opacity: 0, transform: \"translate(20px, 0px)\" }\n  });\n  const { bldgType, climateZone, floorArea, setCurrentWorkingScenario, setCurrentBaseCase} = useContext(ProjectContext)\n  //state format check scenarioReducer.jsx\n  const [state, dispatch] = useContext(ScenarioListContext)\n  //we can later use this to update the search results - use deep copy first.\n  const[currentState, setCurrentState] = useState(state.cases)\n  //search related\n  const[searchWords, setSearchWords] = useState(\"\")\n  const[sortWords, setSortWords] = useState(\"time\")\n  const[displayStatusValue, setDisplayStatusValue] = useState(\"1\")\n  const[selectedCase, setSelectedCase] = useState({})\n\n  const navigate = useNavigate()\n \n  //FUNCTIONS\n  //update the currentState (the list of the scenarios)\n  //used for duplicate case\n  useEffect(()=>{\n    if(currentState !== state.cases){\n      setCurrentState(state.cases)\n    }\n    if(bldgType===\"\" || climateZone===\"\"){\n       //navigate back to project\n      navigate(\"/project\")\n    }\n  }, [state.cases, bldgType, climateZone])\n\n  const createNewScenario = (e, base) => {\n    let linkDesign = '/design/' + genID()\n    setCurrentWorkingScenario(e)\n    setCurrentBaseCase(base[\"value\"])\n    navigate(linkDesign)\n  }\n\n  const handleMouseClick = (selectedCase) => {\n    setSelectedCase(selectedCase)\n  }\n\n  /*\n  utility function that sorts the list of scenarios in a time order\n  */\n  function order(a, b) {\n    if(sortWords === \"time\"){\n      return (new Date(b.props.valueStatus.time) - new Date(a.props.valueStatus.time))\n    }else if(sortWords === \"name\"){\n      return b.props.valueStatus.name - a.props.valueStatus.name\n    }else if(sortWords === \"eui\"){\n      return b.props.valueStatus.eui - a.props.valueStatus.eui\n    }\n  }\n\n  function searchScenarioList(){\n    return currentState.filter(scenario => scenario.name.toLowerCase().includes(searchWords.toLowerCase())).map((scenario, index) => (\n      <CustomListGroupItem valueStatus={scenario} index={index} key={index} displayStatus={displayStatusValue} handleMouseClick={handleMouseClick}/>\n    )).sort(order)\n  }\n\n  function scenarioSnapshotRender(){\n    if(Object.keys(selectedCase).length > 0){\n      return (\n        <>\n          <Row>\n          <Col>\n            <Table size=\"sm\">\n              <tbody>\n                <tr>\n                  <td>\n                    Name: <strong>{selectedCase[\"name\"]}</strong>\n                  </td>\n                </tr>\n                <tr>\n                  <td> \n                    Floor Area: <strong>{floorArea}</strong> (ft2)\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    Building Type: <strong>{bldgType[\"value\"]}</strong>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    Climate Zone: <strong>{climateZone[\"value\"]}</strong>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    EUI: <strong>{`${selectedCase[\"eui\"]} (${selectedCase[\"unit\"]})`}</strong>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    Status: <strong>{selectedCase[\"status\"]}</strong>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    Time: <strong>{selectedCase[\"time\"]}</strong>\n                  </td>\n                </tr>\n              </tbody>\n            </Table>\n          </Col>\n          </Row>\n          <Row>\n            <Col>\n              <CustomPieChart\n                scenarioData = {[selectedCase['Electricity-Cooling'], selectedCase['Electricity-General'], selectedCase['Electricity-Auxiliary'], selectedCase['Electricity-Heating'], selectedCase['Natural Gas-Heating']]}\n                scenarioLabels= {[`Cool (kBtu/ft2)`,`General (kBtu/ft2)`, `Auxiliary (kBtu/ft2)`, `Heating (Electricity) (kBtu/ft2)`, `Heating (Natural Gas) (kBtu/ft2)`]}\n                width= {320}\n                height= {600}\n                colors={['rgb(2,117,216)', 'rgb(91,192,222)', 'rgb(92, 184, 92)', 'rgb(240, 173, 78)', 'rgb(217, 83, 79)']}\n              >\n              </CustomPieChart>\n            </Col>\n          </Row>\n        </>\n        \n      )\n    }\n  }\n\n  if(currentState.length === 2){\n    //Temp fix - every new project will have minimum 2 cases.\n    return(\n      <animated.div style={fadeInRight}>\n        <Row style={{marginTop: \"30px\"}}>\n          <Col xs={12}>\n            <Card>\n              <Card.Header>\n                <Row>\n                  <Col><h3>Scenarios</h3></Col>\n                </Row>\n              </Card.Header>\n              <Card.Body>\n                <Container style={{position: \"relative\", width: \"50%\"}}>\n                  <img src=\"/simple-building-calculator/img/bldg_background.png\" alt=\"building\" style={{width:\"100%\", height:\"auto\"}}/>\n                  <CustomModal\n                    buttonVariant={\"secondary\"}\n                    buttonSize={\"lg\"}\n                    buttonStyle={{position: \"absolute\", top:\"45%\", left:\"40%\"}}\n                    buttonText={\"New Scenario\"}\n                    modalTitle={\"Enter the name of the new scenario\"}\n                    createAction={createNewScenario}\n                    closeText={\"Close\"}\n                    confirmText={\"Create\"}\n                    options = {dataUtils.convert_scenario_list_to_option_list(state)}\n                  ></CustomModal>\n                </Container>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </animated.div>\n    )\n  }\n\n  return (\n    <animated.div style={fadeInRight}>\n      <Row style={{marginTop: \"30px\"}}>\n        <Col xs={8}>\n          <Card>\n            <Card.Header>\n              <Row>\n                <Col><h3 style={{marginTop:\"6px\"}}>Scenarios</h3></Col>\n                <Col><CustomModal\n                    buttonVariant={\"secondary\"}\n                    buttonSize={\"lg\"}\n                    buttonStyle={{float: \"right\", marginTop:\"0px\"}}\n                    buttonText={\"New Scenario\"}\n                    modalTitle={\"Enter the name of the new scenario\"}\n                    createAction={createNewScenario}\n                    closeText={\"Close\"}\n                    confirmText={\"Create\"}\n                    options = {dataUtils.convert_scenario_list_to_option_list(state)}\n                  ></CustomModal></Col>\n              </Row>\n            </Card.Header>\n            <Card.Body>\n              <Card.Title>\n                <Row>\n                  <Col md={10}>\n                    <Form className=\"d-flex\">\n                      <InputGroup>\n                        <DropdownButton\n                          variant=\"outline-secondary\"\n                          title={`Sort by: ${sortWords}`}\n                          id=\"scenario_sort\"\n                          onSelect={(event) => setSortWords(event)}\n                        >\n                          <Dropdown.Item eventKey=\"time\">Time</Dropdown.Item>\n                          <Dropdown.Item eventKey=\"eui\">EUI</Dropdown.Item>\n                          <Dropdown.Item eventKey=\"name\">Name</Dropdown.Item>\n                        </DropdownButton>\n                        <FormControl\n                          type=\"search\"\n                          placeholder=\"Search\"\n                          className=\"me-2\"\n                          aria-label=\"Search\"\n                          value={searchWords}\n                          onChange={(event) => setSearchWords(event.target.value)}\n                        />\n                      </InputGroup>\n                    </Form>\n                  </Col>\n                  <Col md={2}>\n                  <ButtonGroup className={\"pull-right\"}>\n                    {\n                      scenarioStatus.map((status, idx) => (\n                        <ToggleButton\n                          key={idx}\n                          id={`display-status-${idx}`}\n                          type=\"radio\"\n                          variant={idx%2 ? 'outline-success' : 'outline-danger'}\n                          name=\"status\"\n                          value={status.value}\n                          checked={displayStatusValue === status.value}\n                          onChange={(e) => setDisplayStatusValue(e.currentTarget.value)}\n                        >\n                          {status.name}\n                        </ToggleButton>\n                      ))\n                    }\n                  </ButtonGroup>\n                  </Col>\n                </Row>\n              </Card.Title>\n              <br></br>      \n              <ListGroup>\n                <Scroll>\n                  {searchScenarioList()}\n                </Scroll>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col xs={4}>\n          <animated.div className=\"icard\" style={fadeInRight}>\n            <div className=\"icard-title\">\n              <h4>Scenario Snapshot</h4>\n            </div>\n            <div className=\"icard-content\">\n              {\n                scenarioSnapshotRender()\n              }\n            </div>\n          </animated.div>\n        </Col>\n      </Row>\n    </animated.div>\n  );\n}\n\nexport default Scenario;","import React from 'react'\nimport {Badge} from 'react-bootstrap'\nimport { convert_num_to_percent, format_num_to_string } from '../util/dataProcessor'\n\n\nexport default function CustomDisplayCard(props){\n    const {cardTitle, displayData, displaySmall, badgeInfo, badgeColor, compareMetrics} = props\n\n    const renderCompareIcon = () => {\n        if(compareMetrics === undefined || compareMetrics === \"\"){\n            return (<></>)\n        }else{\n            if(compareMetrics > 0){\n                return (<div className=\"pull-right font-bold text-success\">{convert_num_to_percent(compareMetrics)}<i className=\"fa fa-bolt\"></i></div>)\n            }else{\n                return (<div className=\"pull-right font-bold text-warning\">{convert_num_to_percent(compareMetrics)}<i className=\"fa fa-bolt\"></i></div>)\n            }\n        }\n    }\n\n    return(\n        <>\n            <div className={\"icard\"}>\n                <div className={\"icard-title\"}>\n                    <Badge bg={badgeColor} className=\"pull-right\">{badgeInfo}</Badge>\n                    <h5>{cardTitle}</h5>\n                </div>\n                <div className={\"icard-content\"}>\n                    <h1 className={\"no-margins\"}>{format_num_to_string(displayData)}</h1>\n                    {renderCompareIcon()}\n                    <small>{displaySmall}</small>\n                </div>\n            </div>\n        </>\n    )\n}","import React from 'react'\nimport Plot from 'react-plotly.js'\n\n\nexport default function CustomResponsiveTable(props){\n    const {dataValue} = props\n\n    const headerColor = \"grey\"\n    const rowColorArrayMap = [\"lightgrey\", \"white\"]\n\n    const rowColorArray = () => {\n        let colorArray = []\n        dataValue.forEach(function (value, i){\n            colorArray.push(rowColorArrayMap[i%2])\n        })\n        return colorArray\n    }\n\n    const defaultRowColorArray = rowColorArray()\n\n    const data = [\n        {\n            type: 'table',\n            header: {\n                values: [[\"\"], [`<b>Total (kBtu/ft2)</b>`],[`<b>per Square Foot (kBtu)</b>`], [`<b>Percent Savings</b>`]],\n                align: \"center\",\n                line: {width: 2, color: 'black'},\n                fill: {color: headerColor},\n                font: {family: \"Verdana\", size: 18, color: \"white\"}\n            },\n            cells:{\n                values: dataValue,\n                height: 30,\n                align: \"center\",\n                line: {color: \"black\", width: 2},\n                fill: {defaultRowColorArray},\n                font: {family: \"Verdana\", size: 18, color: [\"black\"]}\n            }\n        }\n    ]\n\n    return (\n        <div>\n          <Plot\n            data={data}\n            layout = {{margin: {\"t\": 20, \"b\": 0, \"l\": 0, \"r\":0},}}\n            style={{width: \"100%\", heigh: \"100%\"}}\n          />\n        </div>\n    );\n}","import React, {useContext, useState} from 'react'\nimport CustomBarChart from \"../components/customBarChart\";\nimport CustomDisplayCard from \"../components/customDisplayCard\";\nimport CustomResponsiveTable from './customResponsiveTable';\nimport {ProjectContext, ScenarioListContext, ScenarioContext, AdvancedConfigContext} from \"../store/index\";\nimport { Row, Col, Button } from \"react-bootstrap\";\nimport * as dataUtils from \"../util/dataProcessor.jsx\";\nimport Select from \"react-select\"\n\nconst category=[\"Electricity-Auxiliary\",\n    \"Electricity-Cooling\",\n    \"Electricity-General\",\n    \"Electricity-Heating\",\n    \"Natural Gas-Heating\",]\n\nconst colorMap = {\n    \"Electricity-Auxiliary\": \"#173F5F\",\n    \"Electricity-Cooling\": \"#20639B\",\n    \"Electricity-General\": \"#3CAEA3\",\n    \"Electricity-Heating\": \"#F6D55C\",\n    \"Natural Gas-Heating\": \"#ED553B\",\n}\n\nexport default function ScenarioCompare(){\n    //get global variables\n    const {floorArea, project} = useContext(ProjectContext)\n    const [scenarioListState, scenarioListDispatch] = useContext(ScenarioListContext)\n    const [scenarios, scenariosDispath] = useContext(ScenarioContext)\n    const {electricityRate,natGasRate,electricityCarbon,natGasCarbon,electricitySourceToSite,natGasSourceToSite} = React.useContext(AdvancedConfigContext)\n\n    const analysisTypeArray = dataUtils.getAnalysisType()\n    const [analysisType, setAnalysisType] = useState(analysisTypeArray[0])\n\n    //this component draws a bar chart\n    const generatePlotData = (traces, electricMultiplier, natGasMultiplier) => {\n        for(var i=0; i<category.length; i++){\n            var trace = {}\n            var y = []\n            var x = []\n            var maxTechX = \"\"\n            var maxTechY = 0.0\n            for(var j=0; j<scenarioListState.cases.length; j++){\n                if(scenarioListState.cases[j][\"id\"] === \"baseline\" || scenarioListState.cases[j][\"status\"] === \"active\") {\n                    x.push(scenarioListState.cases[j]['name'])\n                    if(category[i].startsWith('Electricity')){\n                        //electricity multiplier\n                        y.push(scenarioListState.cases[j][category[i]] * electricMultiplier)\n                    }else{\n                        //natural gas multiplier\n                        y.push(scenarioListState.cases[j][category[i]] * natGasMultiplier)\n                    }\n                }else if(scenarioListState.cases[j][\"id\"] === \"max_tech\"){\n                    maxTechX = \"Max Tech\"\n                    if(category[i].startsWith('Electricity')){\n                        //electricity multiplier\n                        maxTechY = scenarioListState.cases[j][category[i]] * electricMultiplier\n                    }else{\n                        //natural gas multiplier\n                        maxTechY = scenarioListState.cases[j][category[i]] * natGasMultiplier\n                    }\n                }\n            }\n            // add max tech at the end\n            x.push(maxTechX)\n            y.push(maxTechY)\n            trace[\"x\"] = x\n            trace[\"y\"] = y\n            trace[\"name\"] = category[i]\n            trace[\"type\"] = 'bar'\n            //set the color.\n            trace[\"marker\"] = {\"color\": colorMap[category[i]]}\n            traces.push(trace)\n        }\n        return traces\n    }\n\n    const [plotData, setPlotData] = useState(generatePlotData([], 1.0, 1.0))\n\n    const handleChangeAnalysisType = (value) => {\n        if(value['value'] !== analysisType['value']){\n            setAnalysisType(value)\n          }\n          let tempElectricFactor = dataUtils.getElectricConversionFactor(value[\"value\"], floorArea, electricitySourceToSite[\"value\"],electricityCarbon[\"value\"], electricityRate[\"value\"])\n          let tempNatGasFactor = dataUtils.getNatGasConversionFactor(value[\"value\"], floorArea, natGasSourceToSite[\"value\"], natGasCarbon[\"value\"], natGasRate[\"value\"])\n          let tempPlotData = generatePlotData([], tempElectricFactor, tempNatGasFactor)\n          setPlotData(tempPlotData)\n    }\n\n    const baseCase = scenarioListState.cases.filter(scenario => scenario[\"id\"] === \"baseline\")[0]\n    const maxTechCase = scenarioListState.cases.filter(scenario => scenario[\"id\"] === \"max_tech\")[0]\n\n    return(\n        <>\n        <div className=\"icard\">\n            <div className=\"icard-title\">\n                <h3>Scenario Comparison</h3>\n            </div>\n            <div className=\"icard-content\">\n                <Row>\n                    <Col xs={6}>\n                    <Select \n                        options={[...analysisTypeArray]} \n                        name={\"analysis_type\"} \n                        value={analysisType}\n                        onChange={handleChangeAnalysisType}></Select>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <CustomBarChart plotData={plotData} barmode={\"stack\"} unit={`${analysisType['label']} [${dataUtils.getAnalysisTypeUnit(analysisType['value'])}]`} title={\"Scenarios\"}/>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col><CustomDisplayCard\n                            cardTitle = {\"Baseline\"}\n                            displayData = {baseCase[\"eui\"]}\n                            displaySmall = {\"kBtu/sqft/year\"}\n                            badgeInfo = {\"Base\"} \n                            badgeColor = {\"warning\"}\n                        >\n                        </CustomDisplayCard>\n                    </Col>\n                    <Col><CustomDisplayCard\n                            cardTitle = {\"Max Tech\"}\n                            displayData = {maxTechCase[\"eui\"]}\n                            displaySmall = {\"kBtu/sqft/year\"}\n                            badgeInfo = {\"Max\"} \n                            badgeColor = {\"primary\"}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <div className={\"icard\"}>\n                            <div className={\"icard-title\"}>\n                                <h3>Scenarios Detail</h3>\n                                <Button \n                                    variant=\"success\"\n                                    type=\"button\"\n                                    href={`data:text/json;charset=utf-8, ${encodeURIComponent(\n                                        dataUtils.downloadDesignScenarioToLocal(scenarioListState, scenarios)\n                                        )}`}\n                                    download={`${project}.csv`}\n                                    className={\"pull-right\"}\n                                    >Download Scenarios</Button>\n                            </div>\n                            <div className={\"icard-content\"}>\n                                <CustomResponsiveTable\n                                    dataValue =  {dataUtils.makeResponsibleTableData(scenarioListState, floorArea)}\n                                ></CustomResponsiveTable>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </div>\n        </div>\n        </>\n    )\n}","import React, {useContext, useEffect, useState} from 'react'\nimport { Row, Col, Table, Card } from \"react-bootstrap\";\nimport {ProjectContext, ScenarioListContext, ScenarioContext, AdvancedConfigContext} from \"../store/index\";\nimport CustomDisplayCard from './customDisplayCard';\nimport Select from \"react-select\"\nimport * as dataUtils from \"../util/dataProcessor.jsx\";\nimport * as alg from '../util/algorithmLoader.jsx'\nimport CustomPieChart from './customPieChart';\n\nexport default function ScenarioReport(){\n\n    const [scenarioListState, scenarioListDispatch] = useContext(ScenarioListContext)\n    const [scenarioState, scenarioDispatch] = useContext(ScenarioContext)\n    const {bldgType, climateZone, floorArea} = useContext(ProjectContext)\n    const {electricityRate,natGasRate,electricityCarbon,natGasCarbon,electricitySourceToSite,natGasSourceToSite} = useContext(AdvancedConfigContext)\n    const analysisTypeArray = dataUtils.getAnalysisType()\n    //exclude baseline and max_tech cases\n    const scenarioListArray = dataUtils.convert_scenario_list_to_option_list(scenarioListState, false)\n    \n    const [analysisType, setAnalysisType] = useState(analysisTypeArray[0])\n    const [selectedScenario, setSelectedScenario] = useState(scenarioListArray[0])\n    const [electricityConversionFactor, setElectricityConversionFactor] = useState(1.0)\n    const [natGasConversionFactor, setNatGasConversionFactor] = useState(1.0)\n\n    const calculatedElectricValues = (scenarioID) => {\n        // calculate the metrics based on selected analysis type\n        let scenario = scenarioState[scenarioID]\n        let total_value = alg.calculateAux(bldgType.value, climateZone.value, scenario, electricityConversionFactor) + \n        alg.calculateCool(bldgType.value, climateZone.value, scenario, electricityConversionFactor) + \n        alg.calculateELHeat(bldgType.value, climateZone.value, scenario, electricityConversionFactor) + \n        alg.calculateGen(bldgType.value, climateZone.value, scenario, electricityConversionFactor)\n        return total_value\n    }\n\n    const calculatedNatGasValues = (scenarioID) => {\n        // calculate the metrics based on selected analysis type\n        let scenario = scenarioState[scenarioID]\n        let total_value = alg.calculateNGHeat(bldgType.value, climateZone.value, scenario, natGasConversionFactor)\n        return total_value\n    }\n\n    const calculatedValues = (scenarioID) => {\n        // calculate the metrics based on selected analysis type\n        let scenario = scenarioState[scenarioID]\n        let total_value = alg.calculateAux(bldgType.value, climateZone.value, scenario, electricityConversionFactor) + \n        alg.calculateCool(bldgType.value, climateZone.value, scenario, electricityConversionFactor) + \n        alg.calculateELHeat(bldgType.value, climateZone.value, scenario, electricityConversionFactor) + \n        alg.calculateGen(bldgType.value, climateZone.value, scenario, electricityConversionFactor) + \n        alg.calculateNGHeat(bldgType.value, climateZone.value, scenario, natGasConversionFactor)\n        return dataUtils.fixed_2(total_value)\n    }\n\n    const updateFuelPieChart = () => {\n        //new data\n        let electricity = dataUtils.fixed_2(calculatedElectricValues(selectedScenario.value) * floorArea)\n        let natGas = dataUtils.fixed_2(calculatedNatGasValues(selectedScenario.value) * floorArea )\n        return [electricity, natGas]\n    }\n\n    const updateBreakdownChart = (value) => {\n        if(value){\n            return [\n                alg.calculateCool(bldgType.value, climateZone.value, scenarioState[selectedScenario.value], electricityConversionFactor),\n                alg.calculateGen(bldgType.value, climateZone.value, scenarioState[selectedScenario.value], electricityConversionFactor),\n                alg.calculateAux(bldgType.value, climateZone.value, scenarioState[selectedScenario.value], electricityConversionFactor),\n                alg.calculateELHeat(bldgType.value, climateZone.value, scenarioState[selectedScenario.value], electricityConversionFactor),\n                alg.calculateELHeat(bldgType.value, climateZone.value, scenarioState[selectedScenario.value], electricityConversionFactor)\n            ]\n        }else{\n            return [\n                `Cool (${dataUtils.getAnalysisTypeUnit(analysisType.value)})`,\n                `General (${dataUtils.getAnalysisTypeUnit(analysisType.value)})`,\n                `Auxiliary (${dataUtils.getAnalysisTypeUnit(analysisType.value)})`,\n                `Heating (Electricity) (${dataUtils.getAnalysisTypeUnit(analysisType.value)})`,\n                `Heating (Natural Gas) (${dataUtils.getAnalysisTypeUnit(analysisType.value)})`\n            ]\n        }\n    }\n\n    const [baselineMetricValue, setBaselineMetricValue] = useState(calculatedValues(dataUtils.getProjectBaselineScenario(scenarioListState.cases).id))\n    const [selectedScenarioMetricValue, setSelectedScenarioMetricValue] = useState(calculatedValues(selectedScenario.value))\n    const [fuelPieChartValue, setFuelPieChartValue] = useState(updateFuelPieChart())\n    const [metricBreakdownValue, setMetricBreakdownValue] = useState(updateBreakdownChart(true))\n    const [metricBreakdownLabel, setMetricBreakdownLabel] = useState(updateBreakdownChart(false))\n    //update the currentState (the list of the scenarios)\n    //used for duplicate case\n    useEffect(()=>{\n        setBaselineMetricValue(calculatedValues(dataUtils.getProjectBaselineScenario(scenarioListState.cases).id))\n        setSelectedScenarioMetricValue(calculatedValues(selectedScenario.value))\n        let fuelData = updateFuelPieChart()\n        setFuelPieChartValue(fuelData)\n        let breakdownData = updateBreakdownChart(true)\n        setMetricBreakdownValue(breakdownData)\n        let breakdownLabel = updateBreakdownChart(false)\n        setMetricBreakdownLabel(breakdownLabel)\n    }, [electricityConversionFactor, natGasConversionFactor, selectedScenario])\n\n    const handleOptionChanges = (value, e) => {\n        if(e['name'] === 'analysis_type'){\n            if(value['value'] !== analysisType['value']){\n                let tempElectricFactor = dataUtils.getElectricConversionFactor(value[\"value\"], floorArea, electricitySourceToSite[\"value\"],electricityCarbon[\"value\"], electricityRate[\"value\"])\n                let tempNatGasFactor = dataUtils.getNatGasConversionFactor(value[\"value\"], floorArea, natGasSourceToSite[\"value\"], natGasCarbon[\"value\"], natGasRate[\"value\"])\n     \n                setElectricityConversionFactor(tempElectricFactor)\n                setNatGasConversionFactor(tempNatGasFactor)\n                setAnalysisType(value)\n            }\n        }else if (e['name'] === 'scenario_list'){\n            if(value['value'] !== selectedScenario['value']){\n                setSelectedScenario(value)\n                setSelectedScenarioMetricValue(calculatedValues(value.value))\n            }\n        }\n    }\n\n    const renderComplianceOutcome = () => {\n        let color = \"success\"\n        let outcome = \"PASS\"\n\n        if(baselineMetricValue <= selectedScenarioMetricValue){\n            outcome = \"FAIL\"\n            color = \"warning\"\n        }\n\n        return (\n        <>\n            <Card bg={color} style={{\"height\": \"94%\"}}>\n                <Card.Body>\n                    <h1 style={{\"padding\": \"35%\", \"textAlign\": \"center\", \"color\": \"white\"}}>{outcome}</h1>\n                </Card.Body>\n            </Card>\n        </>)\n    }\n\n    return (\n        <>\n            <div className={\"icard\"}>\n                <div className={\"icard-title\"}>\n                    <h3>Scenario Report</h3>\n                </div>\n                <div className={\"icard-content\"}>\n                    <Row>\n                        <Col xs={6}>\n                            <h6>Scenario</h6>\n                            <Select\n                                options={[...scenarioListArray]}\n                                name={\"scenario_list\"}\n                                value={selectedScenario}\n                                onChange={handleOptionChanges}\n                            ></Select>\n                        </Col>\n                        <Col xs={6}>\n                            <h6>Performance Metrics</h6>\n                            <Select \n                                options={[...analysisTypeArray]} \n                                name={\"analysis_type\"} \n                                value={analysisType}\n                                onChange={handleOptionChanges}></Select>\n                        </Col>\n                    </Row>\n                </div>\n            </div>\n            <div className={\"icard\"}>\n                <div className={\"icard-title\"}>\n                    <h3>Summary</h3>\n                </div>\n                <div className={\"icard-content\"}>\n                    <Row>\n                        <Col xs={10}>\n                            <Table size=\"sm\">\n                                <tbody>\n                                    <tr>\n                                        <td></td>\n                                        <td>\n                                            Name: <strong>{dataUtils.getSelectedScenarioInfo(scenarioListState.cases, selectedScenario)[\"name\"]}</strong>\n                                        </td>\n                                        <td></td>\n                                        <td> \n                                            Floor Area: <strong>{floorArea}</strong> (ft2)\n                                        </td>\n                                        <td></td>\n                                    </tr>\n                                    <tr>\n                                        <td></td>\n                                        <td>\n                                            Building Type: <strong>{bldgType[\"value\"]}</strong>\n                                        </td>\n                                        <td></td>\n                                        <td>\n                                            Climate Zone: <strong>{climateZone[\"value\"]}</strong>\n                                        </td>\n                                        <td></td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n                        </Col>\n                        <Col xs={2}></Col>\n                    </Row>\n                </div>\n            </div>\n            <div className={\"icard\"}>\n                <div className={\"icard-title\"}>\n                    <h3>Compare with Standard</h3>\n                </div>\n                <div className={\"icard-content\"}>\n                    <Row>\n                        <Col xs={8}>\n                            <Row>\n                                <Col>\n                                    <CustomDisplayCard\n                                        cardTitle = {\"Design\"}\n                                        displayData = {selectedScenarioMetricValue}\n                                        displaySmall = {dataUtils.getAnalysisTypeUnit(analysisType.value)}\n                                        badgeInfo = {\"Base\"} \n                                        badgeColor = {\"warning\"}\n                                    >\n                                    </CustomDisplayCard>\n                                </Col>\n                                <Col>\n                                    <div className={\"icard\"}>\n                                        <div className={\"icard-title\"}>\n                                            <h5>Baseline Metrics</h5>\n                                        </div>\n                                        <div className={\"icard-content\"} style={{\"height\": \"108px\"}}>\n                                            <h2>{analysisType.label}</h2>\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <CustomDisplayCard\n                                        cardTitle = {\"Baseline\"}\n                                        displayData = {baselineMetricValue}\n                                        displaySmall = {dataUtils.getAnalysisTypeUnit(analysisType.value)}\n                                        badgeInfo = {\"Design\"} \n                                        badgeColor = {\"primary\"}\n                                        >\n                                    </CustomDisplayCard>\n                                </Col>\n                                <Col>\n                                    <div className={\"icard\"}>\n                                        <div className={\"icard-title\"}>\n                                            <h5>Code</h5>\n                                        </div>\n                                        <div className={\"icard-content\"} style={{\"height\": \"108px\"}}>\n                                            <h2>ASHRAE 90.1</h2>\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col xs={4}>\n                            {renderComplianceOutcome()}\n                        </Col>\n                    </Row>\n                </div>\n            </div>\n            <div className={\"icard\"}>\n                <div className={\"icard-title\"}>\n                    <h3>{analysisType.label} by Energy Source Breakdown</h3>\n                </div>\n                <div className={\"icard-content\"}>\n                    <Row>\n                        <Col xs={4}>\n                            <Row>\n                                <Col>\n                                    <div className={\"icard card border-primary\"}>\n                                        <div className={\"icard-content\"}>\n                                            <h2>{dataUtils.format_num_to_string(\n                                                dataUtils.fixed_2(\n                                                    calculatedElectricValues(selectedScenario.value)))}</h2>\n                                            <small>Electricity ({dataUtils.getAnalysisTypeUnit(analysisType.value)})</small>\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <div className={\"icard card border-danger\"}>\n                                        <div className={\"icard-content\"}>\n                                            <h2>{dataUtils.format_num_to_string(\n                                                dataUtils.fixed_2(\n                                                    calculatedNatGasValues(selectedScenario.value)))}</h2>\n                                            <small>Natural Gas ({dataUtils.getAnalysisTypeUnit(analysisType.value)})</small>\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col xs={8}>\n                            <CustomPieChart\n                                scenarioData = {fuelPieChartValue}\n                                scenarioLabels= {[\"Electricity (kBtu)\", \"Natural Gas (kBtu)\"]}\n                                width= {700}\n                                height={250}\n                            >\n                            </CustomPieChart>\n                        </Col>\n                    </Row>\n                </div>\n            </div>\n            <div className={\"icard\"}>\n                <div className={\"icard-title\"}>\n                    <h3>{analysisType.label} by End-Use Breakdown</h3>\n                </div>\n                <div className={\"icard-content\"}>\n                    <Row>\n                        <Col xs={4}>\n                            <Row>\n                                <Col>\n                                    <div className={\"icard card text-white bg-primary\"}>\n                                        <div className={\"card-body\"}>\n                                            <h2>{dataUtils.format_num_to_string(alg.calculateCool(bldgType.value, climateZone.value, scenarioState[selectedScenario.value], electricityConversionFactor))}</h2>\n                                            <small>Cool ({dataUtils.getAnalysisTypeUnit(analysisType.value)})</small>\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <div className={\"icard card text-white bg-info\"}>\n                                        <div className={\"card-body\"}>\n                                            <h2>{dataUtils.format_num_to_string(alg.calculateGen(bldgType.value, climateZone.value, scenarioState[selectedScenario.value], electricityConversionFactor))}</h2>\n                                            <small>General ({dataUtils.getAnalysisTypeUnit(analysisType.value)})</small>\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <div className={\"icard card text-white bg-success\"}>\n                                        <div className={\"card-body\"}>\n                                            <h2>{dataUtils.format_num_to_string(alg.calculateAux(bldgType.value, climateZone.value, scenarioState[selectedScenario.value], electricityConversionFactor))}</h2>\n                                            <small>Auxiliary ({dataUtils.getAnalysisTypeUnit(analysisType.value)})</small>\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <div className={\"icard card text-white bg-warning\"}>\n                                        <div className={\"card-body\"}>\n                                            <h2>{dataUtils.format_num_to_string(alg.calculateELHeat(bldgType.value, climateZone.value, scenarioState[selectedScenario.value], electricityConversionFactor))}</h2>\n                                            <small>Heating (Electricity) ({dataUtils.getAnalysisTypeUnit(analysisType.value)})</small>\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <div className={\"icard card text-white bg-danger\"}>\n                                        <div className={\"card-body\"}>\n                                            <h2>{dataUtils.format_num_to_string(alg.calculateNGHeat(bldgType.value, climateZone.value, scenarioState[selectedScenario.value], electricityConversionFactor))}</h2>\n                                            <small>Heating (Natural Gas) ({dataUtils.getAnalysisTypeUnit(analysisType.value)})</small>\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col xs={8}>\n                            <CustomPieChart\n                                scenarioData = {metricBreakdownValue}\n                                scenarioLabels= {metricBreakdownLabel}\n                                width= {800}\n                                height= {700}\n                                colors={['rgb(2,117,216)', 'rgb(91,192,222)', 'rgb(92, 184, 92)', 'rgb(240, 173, 78)', 'rgb(217, 83, 79)']}\n                            >\n                            </CustomPieChart>\n                        </Col>\n                    </Row>\n                </div>\n            </div>\n        </>\n    )\n}","import React from 'react'\nimport Plot from 'react-plotly.js'\n\nexport default function CustomTornadoDiagram(props){\n    const {y, baselineValue, srMaxTech, srWorstCase, srMaxTechParam, srWorstCaseParam, unit, analysisType} = props\n    const graphLayout = {\n        barmode: \"overlay\",\n        autosize:false,\n        xaxis_tickangle: -45,\n        bargap: 0.30,\n        width: 1200,\n        height: 900,\n        font: {family: \"Segoe UI\", size:18},\n        xaxis:{\n            ticksuffix: ` (${unit})`\n        },\n        title: {\n            text: `${analysisType} Sensitivity Analysis`,\n            font: {\n                family: \"Segoe UI\",\n                size: 20,\n                color: \"darkblue\"\n            },\n            x: 0.05\n        }\n    }\n\n    const data = [\n        {\n            \"x\": srMaxTech,\n            \"y\": y,\n            \"base\": srMaxTech.map(x => -x + baselineValue),\n            \"type\": \"bar\",\n            \"name\": \"Max Tech Case\",\n            marker:{\n                color: \"rgb(158, 202, 225)\",\n                line: {\n                    color: \"rgb(8,48,107)\",\n                    width: 1.5,\n                }\n            },\n            \"orientation\": \"h\",\n            \"opacity\": 0.7,\n            \"text\": srMaxTechParam,\n            \"textposition\": \"inside\",\n            \"texttemplate\": \"%{y}: %{text}\",\n        },\n        {\n            \"x\": srWorstCase,\n            \"y\": y,\n            \"base\": baselineValue,\n            \"type\": \"bar\",\n            \"marker_color\": \"crimson\",\n            \"name\": \"Worst Case\",\n            marker: {\n                line:{\n                    color:\"red\",\n                    width: 1.5\n                }\n            },  \n            \"orientation\": \"h\",\n            \"opacity\": 0.7,\n            \"text\": srWorstCaseParam,\n            \"textposition\": \"left\",\n            \"texttemplate\": \"%{y}: %{text}\"\n        }\n    ]\n\n    return (\n        <div>\n          <Plot\n            data={data}\n            layout={graphLayout}\n          />\n        </div>\n    );\n    \n}","import React, {useContext, useState, useEffect} from 'react'\nimport {ProjectContext, ScenarioListContext, AdvancedConfigContext} from \"../store/index\";\nimport * as dataUtils from \"../util/dataProcessor.jsx\";\nimport * as alg from '../util/algorithmLoader.jsx'\nimport { Row, Col, Button, Modal} from \"react-bootstrap\";\nimport Select from \"react-select\"\nimport CustomTornadoDiagram from './customTornadoDiagram';\n\n\nexport default function ScenarioOpportunity(){\n    const [scenarioListState, scenarioListDispatch] = useContext(ScenarioListContext)\n    const {bldgType, climateZone, floorArea} = useContext(ProjectContext)\n    const {electricityRate,natGasRate,electricityCarbon,natGasCarbon,electricitySourceToSite,natGasSourceToSite} = useContext(AdvancedConfigContext)\n    const analysisTypeArray = dataUtils.getAnalysisType()\n    //exclude baseline and max_tech cases\n    const scenarioListArray = dataUtils.convert_scenario_list_to_option_list(scenarioListState, false)\n    \n    const [analysisType, setAnalysisType] = useState(analysisTypeArray[0])\n\n    const [electricityConversionFactor, setElectricityConversionFactor] = useState(1.0)\n    const [natGasConversionFactor, setNatGasConversionFactor] = useState(1.0)\n    \n    const y = dataUtils.getListOfParametersExceptionHVACAndStandard()\n    const baseline = dataUtils.getProjectBaseline(bldgType, climateZone)\n    const maxTech = dataUtils.getProjectMaxTech(bldgType, climateZone)\n    const worstCase = dataUtils.getProjectWorstCase(bldgType, climateZone)\n\n    //modal function\n    const[show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const calculatedValues = (scenario) => {\n        // calculate the metrics based on selected analysis type\n        let total_value = alg.calculateAux(bldgType.value, climateZone.value, scenario, electricityConversionFactor) + \n        alg.calculateCool(bldgType.value, climateZone.value, scenario, electricityConversionFactor) + \n        alg.calculateELHeat(bldgType.value, climateZone.value, scenario, electricityConversionFactor) + \n        alg.calculateGen(bldgType.value, climateZone.value, scenario, electricityConversionFactor) + \n        alg.calculateNGHeat(bldgType.value, climateZone.value, scenario, natGasConversionFactor)\n        return dataUtils.fixed_2(total_value)\n    }\n\n    const createPlotData = (extremeCase) => {\n        let sr = []\n        let baselineValue = calculatedValues(baseline)\n        for(let i=0; i<y.length; i++){\n            let key = y[i]\n            let baselineExtremeCase = {...baseline}\n            baselineExtremeCase[key] = extremeCase[key]\n            sr.push(Math.abs(dataUtils.fixed_2(calculatedValues(baselineExtremeCase)-baselineValue)))\n        }\n        return sr\n    }\n    const [sr1, setSR1] = useState(createPlotData(maxTech))\n    const [sr2, setSR2] = useState(createPlotData(worstCase))\n\n    useEffect(()=>{\n        setSR1(createPlotData(maxTech))\n        setSR2(createPlotData(worstCase))\n    }, [electricityConversionFactor, natGasConversionFactor, analysisType, maxTech, worstCase])\n\n    const handleOptionChanges = (value, e) => {\n        if(e['name'] === 'analysis_type'){\n            let tempElectricFactor = dataUtils.getElectricConversionFactor(value[\"value\"], floorArea, electricitySourceToSite[\"value\"],electricityCarbon[\"value\"], electricityRate[\"value\"])\n            let tempNatGasFactor = dataUtils.getNatGasConversionFactor(value[\"value\"], floorArea, natGasSourceToSite[\"value\"], natGasCarbon[\"value\"], natGasRate[\"value\"])\n            setElectricityConversionFactor(tempElectricFactor)\n            setNatGasConversionFactor(tempNatGasFactor)\n            setAnalysisType(value)\n        }\n    }\n\n    return (\n        <>\n            <div className={\"icard\"}>\n                <div className={\"icard-title\"}>\n                    <h3>Saving Opportunities</h3>\n                </div>\n                <div className={\"icard-content\"}>\n                    <Row>\n                        <Col>\n                            <h6>Performance Metrics</h6>\n                            <Select \n                                options={[...analysisTypeArray]} \n                                name={\"analysis_type\"} \n                                value={analysisType}\n                                onChange={handleOptionChanges}></Select>\n                        </Col>\n                    </Row>\n                </div>\n            </div>\n            <div className={\"icard\"}>\n                <div className={\"icard-title\"}>\n                    <h3>Sensitivity Diagram</h3>\n                    <Button variant=\"success\" onClick={handleShow} className={\"pull-right\"}>How to?</Button>\n                    <Modal show={show} size=\"lg\" onHide={handleClose}>\n                        <Modal.Header closeButton>\n                            <Modal.Title>How to read the diagram</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <p>\n                                The tornado diagram is helpful in understanding which measures have the largest impact on building energy use.\n                            </p>\n                            <p>\n                                The vertical line represents the project baseline case, while the orange bars to the right show increased performance metric (e.g., EUI) with the worst case, and bars to the left show reduced performance metric with the best case.\n                            </p>\n                            <img src=\"/simple-building-calculator/img/diagram_intro_specs.PNG\" alt=\"intro of the tornado diagram\" style={{width:\"100%\", height:\"auto\"}}/>\n                            <p className={\"text-justify\"}>Sample tornado diagram</p>\n                            <ul>\n                                <li><strong>Measures:</strong> x-axis contains a list of measures that apply to the design</li>\n                                <li><strong>Measure value:</strong> Value of the measure for each case, in a format of <i>measure: value</i>.</li>\n                                <li><strong>Performance metric value:</strong> y-axis represents the value of a selected performance metrics. The values updated with the selected performance metric.</li>\n                                <li><strong>Case information:</strong> display the information of the case, including the measure, measure value and the value of the selected performance metric. Show up when cursor is focused on the bar.</li>\n                            </ul>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={handleClose}>\n                                Close\n                            </Button>\n                        </Modal.Footer>\n                    </Modal>\n                </div>\n                <div className={\"icard-content\"}>\n                    <Row>\n                        <Col>\n                            <CustomTornadoDiagram\n                                y = {y}\n                                baselineValue = {calculatedValues(baseline)}\n                                srMaxTech = {sr1}\n                                srWorstCase = {sr2}\n                                srMaxTechParam = {dataUtils.getValuesByKeys(y, maxTech)}\n                                srWorstCaseParam = {dataUtils.getValuesByKeys(y, worstCase)}\n                                unit = {dataUtils.getAnalysisTypeUnit(analysisType.value)}\n                                analysisType = {analysisType.label}\n                            >\n                            </CustomTornadoDiagram>\n                        </Col>\n                    </Row>\n                </div>\n            </div>\n        \n        </>\n    )\n}","import React, {useContext, useEffect} from \"react\";\n// react-bootstrap components\nimport {Tabs, Tab} from \"react-bootstrap\";\nimport {ProjectContext} from \"../store/index\";\nimport {useNavigate} from \"react-router-dom\";\nimport ScenarioCompare from \"../components/scenarioCompare\";\nimport ScenarioReport from \"../components/scenarioReport\";\nimport ScenarioOpportunity from \"../components/scenarioOpportunity\";\nimport {useSpring, animated} from \"react-spring\"\nimport {ScenarioListContext} from \"../store/index\";\n\nfunction Visualizer() {\n  const {bldgType, climateZone} = useContext(ProjectContext)\n  const [state, dispatch] = useContext(ScenarioListContext)\n  const navigate = useNavigate()\n\n  //FUNCTIONS\n  useEffect(()=>{\n    if(bldgType===\"\" || climateZone===\"\"){\n       //navigate back to project if the project is not initialized\n      navigate(\"/project\")\n    }\n    if(state.cases.length === 2){\n      //navigate back to scenario page if project has no cases\n      navigate(\"/scenario\")\n    }\n  })\n\n  //animation style\n  const fadeInRight = useSpring({\n    opacity: 1,\n    config: {mass:1, tension:20, friction:3, clamp: true},\n    transform: \"translate(0px, 0px)\",\n    from: { opacity: 0, transform: \"translate(20px, 0px)\" }\n  });\n\n  if(bldgType===\"\" || climateZone===\"\"){\n    return (\n      <></>\n    )\n  }\n\n  if(state.cases.length === 2){\n    return (\n      <></>\n    )\n  }\n\n  return (\n    <animated.div style={fadeInRight}>\n      <Tabs defaultActiveKey=\"compare\" id=\"scenario-visualization\" className=\"mb-3\">\n        <Tab eventKey=\"compare\" title=\"Scenario Compare\">\n          <ScenarioCompare></ScenarioCompare>\n        </Tab>\n        <Tab eventKey=\"opportunity\" title=\"Saving Opportunity\">\n          <ScenarioOpportunity></ScenarioOpportunity>\n        </Tab>\n        <Tab eventKey=\"report\" title=\"Scenario Report\">\n          <ScenarioReport></ScenarioReport>\n        </Tab>\n      </Tabs>\n    </animated.div>\n  );\n}\n\nexport default Visualizer;","import React from \"react\";\n\nexport default function MainInterface(){\n    return (\n        <>  \n            <h5>Main Interface: Tabs Explained</h5>\n            <p>The \"Scenario\" and \"Visualization\" tabs become active after the \"Project Info\" details have been entered in the \"Project\" tab. There is a logical sequence in the organization of the tabs, and the following sections explains the content and the usage of each tab. </p>\n            <img src={\"/simple-building-calculator/img/nav.png\"} alt=\"navigator\" style={{marginBottom: \"10px\"}}/>\n            <br ></br>\n        </>\n    )\n}","import React from \"react\";\n\nexport default function ProjectDoc(){\n    return (\n        <>  \n            <h5>Project</h5>\n            <p>The Project tab has two parts: </p>\n            <img src={\"/simple-building-calculator/img/project_page_small.png\"} alt=\"navigator\" style={{height: \"600px\", marginBottom: \"10px\"}}/>\n            <p><strong>Simple Building Calculator: </strong> This part on the Left-Hand Side gives the user an overview of the SBC tool.</p>\n            <p><strong>Project Info: </strong> This part on the Right-Hand Side is the main input section allowing the user to add information about their project. The inputs include \"Project Name\", \"Building Type\", \"Climate Zone\" and \"Floor Area\".</p>\n            <p>The beta version currently allows: </p>\n            <ol>\n                <li><p>Building types of Medium Office and Strip Mall.</p></li>\n                <li><p>Climate Zone 2A, 4C and 8 (The climate zone classification is available here.) </p></li>\n                <li><p>Floor Area in SQFT (Floor area shall be smaller than <strong>50,000 SQFT</strong> to use this tool.)</p></li>\n            </ol>\n            <p><span style={{fontFamily: \"Courier New\"}}>Confirm: </span> Upon entering the project details the user can click on the <span style={{fontFamily: \"Courier New\"}}>Confirm </span>button to save the current inputs and move to the next tab to set up the \"Scenario\".</p>\n            <p><span style={{fontFamily: \"Courier New\"}}>Load: </span> Project inputs can be saved in the \"Scenario\" tab as a json file and loaded into the tool (described in the next section).</p>\n            <p><span style={{fontFamily: \"Courier New\"}}>Advanced: </span> Includes inputs for the Electricity Rate, Natural Gas Rate, Electricity Carbon Emissions, Natural Gas Carbon Emissions, Electricity Source Conversion Factor, and Natural Gas Conversion Factor. The pre-defined values are based on …… (add source) and can be left as default, or the user may add inputs based on location and available data.</p>\n            <p><span style={{fontFamily: \"Courier New\"}}>Continue: </span> Upon entering the project information the user will see a <span style={{fontFamily: \"Courier New\"}}>Continue </span> button that will allow them to move on to the \"Scenario\" tab for additional inputs.</p>\n        </>\n    )\n}","import React from \"react\";\n\nexport default function ScenarioDoc(){\n    return (\n        <>\n            <h5>Scenario</h5>\n            <img src={\"/simple-building-calculator/img/scenario_fresh.png\"} alt=\"scenario_fresh\"/>\n            <p>The user clicks <span style={{fontFamily: \"Courier New\"}}>New Scenario </span>to take them to the input window for naming the scenario and selecting a baseline. The baseline includes the ASHRAE 90.1 2019 and Max Tech (maximum technical potential) options.</p>\n            <p>The user clicks <span style={{fontFamily: \"Courier New\"}}>create </span>to edit the scenario to add the inputs for the parameters.</p>\n            <img src={\"/simple-building-calculator/img/scenario_create.png\"} alt=\"scenario_create\"/>\n            \n            <p>The Scenario section has two parts the <a href=\"#scenarioLeftHand\">Left-Hand Side </a> and the <a href=\"#scenarioRightHand\">the Right-Hand Side. </a></p>\n        </>\n    )\n}","import { MathJaxContext, MathJax } from \"better-react-mathjax\";\nimport React from \"react\";\n\nfunction Formula(props){\n    const texStr = \"\\\\(\" + props.tex + \"\\\\)\"\n    return(\n        <MathJaxContext>\n            <MathJax inline>{texStr}</MathJax>\n        </MathJaxContext>\n    )\n}\n\nexport default function ECMParamDoc(){\n    return (\n        <>\n            <p>ECM list and parameters include:</p>\n            <ul>\n                <li>\n                    <strong>Window to wall ratio (WWR): </strong>The ratio of total vertical fenestration (window) to wall area.\n                    <dd>- <Formula tex={\"WWR = \\\\frac{\\\\text{total window area}}{\\\\text{total wall area}}\"}></Formula></dd>\n                </li>\n                <li>\n                    <strong>Skylight to rool ratio (SRR): </strong>The ratio of total skylight area to roof area.\n                    <dd>- <Formula tex={\"SRR = \\\\frac{\\\\text{total skylight area}}{\\\\text{total roof area}}\"}></Formula></dd>\n                </li>\n                <li>\n                    <strong>Floor F-factor (Btu/h-ft-F): </strong>The F-factor of an unheated slab-on-grade floor.\n                </li>\n                <li>\n                    <strong>Wall U-factor (Btu/h-ft2-F): </strong>The U-factor of a wall assembly.\n                </li>\n                <li>\n                    <strong>Window U-factor (Btu/h-ft2-F): </strong>The U-factor of a window assembly.\n                </li>\n                <li>\n                    <strong>Window SHGC: </strong>The solar heat gain coefficient of a window assembly.\n                </li>\n                <li>\n                    <strong>Envelope leakage (cfm/ft2@75pa): </strong>The air leakage through the exterior envelope assembly in cfm/square foot @ 75 pascals and includes leakage through above and below grade building envelope. The air leakage rates are adjusted for standard wind conditions as described in ????.\n                </li>\n                <li>\n                    <strong>Roof U-factor (Btu/h-ft2-F): </strong>The U-factor of the roof assembly.\n                </li>\n                <li>\n                    <strong>Daylight control fraction (%): </strong>The ratio of the floor area with daylight-controlled lights that dim in response to daylight availability in the space to the total floor area.\n                    <dd>- <Formula tex={\"\\\\text{daylight control fraction} = \\\\frac{\\\\text{total floor area with daylight controlled lights}}{\\\\text{total floor area}}\"}></Formula></dd>\n                </li>\n                <li>\n                    <strong>Occupancy control fraction (%): </strong>The ratio of floor area with occupancy sensor-controlled lights to the total floor area.\n                    <dd>- <Formula tex={\"\\\\text{occupancy control fraction} = \\\\frac{\\\\text{total floor area with occupancy sensor controlled lights}}{\\\\text{total floor area}}\"}></Formula></dd>\n                </li>\n                <li>\n                    <strong>Plug load control fraction (%): </strong>The ratio of all 125 volt 15- and 20-ampere receptacles that can turn the receptacle power off during unoccupied hours or when no occupants have been detected for more than 20 minutes to that of total receptacle power.\n                    <dd>- <Formula tex={\"\\\\text{plug load control fraction} = \\\\frac{\\\\text{total controlled receptacle power}}{\\\\text{total receptacle power}}\"}></Formula></dd>\n                </li>\n                <li>\n                    <strong>Lighting power density (W/ft2): </strong>The ratio of the total lighting power to the total floor area.\n                    <dd>- <Formula tex={\"\\\\text{lighting power density} = \\\\frac{\\\\text{total lighting power}}{\\\\text{total floor area}}\"}></Formula></dd>\n                </li>\n                <li>\n                    <strong>Fan power (W/cfm): </strong>The total fan power in Watts/cfm calculated as:\n                    <dd>- <Formula tex={\"\\\\text{Fan power} = \\\\frac{\\\\text{Fan total efficiency} * \\\\text{Fan static pressure} * 6356}{746}\"}></Formula></dd>\n                    <dd>- <Formula tex={\"\\\\text{Fan total efficiency} = \\\\text{Fan motor efficiency} + \\\\text{Fan mechanical efficiency}\"}></Formula></dd>\n                </li>\n                <li>\n                    <strong>Fan extra hours (hr): </strong>The additional hours the fan and outside air dampers are on for warmup or after regularly occupied hours.\n                </li>\n                <li>\n                    <strong>Fan control: </strong>The minimum fan turn- down for variable airflow rate.\n                </li>\n                <li>\n                    <strong>Heating thermal efficiency: </strong>The thermal efficiency of the space heating equipment.\n                </li>\n                <li>\n                    <strong>Cooling COP: </strong>The efficiency of the space cooling equipment.\n                </li>\n                <li>\n                    <strong>Economizer temperature limit setpoint or lockout temperature (F): </strong>The maximum dry bulb temperature (Fahrenheit) limit of a fixed dry bulb economizer.\n                </li>\n                <li>\n                    <strong>Outside air (OA) annual fraction: </strong>The average annual percentage of design outside air per requirements of ASHRAE 62.1 when the space is occupied.\n                </li>\n                <li>\n                    <strong>ERV Enthalpy effectiveness ratio: </strong>The effectiveness of the energy recovery equipment. \n                </li>\n            </ul>\n        </>\n    )\n}","import React, {useState} from \"react\";\nimport ECMParamDoc from \"./ecmParamDoc\";\nimport { Button, Modal } from \"react-bootstrap\";\n\nexport default function DesignLeftHand(){\n      //modal function\n    const[show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n        <>\n            <h5>Design Left-Hand Side</h5>\n            <img src={\"/simple-building-calculator/img/scenario_section_small.png\"} style={{height: \"600px\"}} alt=\"scenario_section\"/>\n            <p><span style={{fontFamily: \"Courier New\"}}>Standard </span>is used to select the relevant building energy code standards from ASHRAE 90.1, IECC 2021 (International Energy Conservation Code) or custom. </p>\n            <p><span style={{fontFamily: \"Courier New\"}}>HVAC </span>currently includes Packaged VAV with electric reheat for the Medium Office and Packaged single zone air-conditioner with natural gas heat for the Strip Mall, that will be the default based on the project building typology chosen for the project. </p>\n            <p>For each building typology, an efficiency conservation measure list (ECM) has been identified. This input section allows the user to change the values of the parameters from the ECM list to calculate the metric related to energy usage, carbon emissions and utility cost (link to metrics glossary).  The input for each parameter can be changed by either using the slider or clicking on input to type the value in the respective box. </p>\n            <p>The ECM list and parameters can be found <a href=\"#scenarioLeftHand\" onClick={handleShow}>here</a></p>\n            <Modal show={show} size=\"lg\" onHide={handleClose}>\n                <Modal.Header closeButton>\n                  <Modal.Title>ECM Parameters Help</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                  <ECMParamDoc></ECMParamDoc>\n                </Modal.Body>\n                <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                      Close\n                  </Button>\n                </Modal.Footer>\n              </Modal>\n              <p>The change in inputs can automatically be visualized on the right-hand side, the details of which are explained in detail below. Once all the inputs have been provided, the user should <span style={{fontFamily: \"Courier New\"}}>save</span>\n              and <span style={{fontFamily: \"Courier New\"}}>exit</span> to go back to the list of scenarios to create more scenarios.\n              <span style={{fontFamily: \"Courier New\"}}>Cancel</span> takes you back to the main scenario tab with no changes.\n              </p>\n              <img src={\"/simple-building-calculator/img/download_session.png\"} style={{width: \"800px\"}}alt=\"download_session\"/>\n              <p><span style={{fontFamily: \"Courier New\"}}>Download Session</span> button at the top right allows the user to save the session details that include the project and scenarios as a json file that can be loaded in the \"Project\" tab in another session.\n              The <span style={{fontFamily: \"Courier New\"}}>Download Session</span> button is visible after the user clicks <span style={{fontFamily: \"Courier New\"}}>save</span> for the inputs.\n              </p>\n        </>\n    )\n}","import React from \"react\";\n\nexport default function EndUseDoc(){\n\n    return(\n        <>\n            <ul>\n                <li><strong>ELheat: </strong>Electricity consumption for heating related HVAC equipment (electric resistance heaters, electric reheat coils, humidification).</li>\n                <li><strong>ELcool: </strong>Electricity consumption for cooling related HVAC equipment (chillers, DX cooling equipment, heat rejection).</li>\n                <li><strong>ELgen: </strong>Electricity consumption for general building systems (interior lighting, exterior lighting, interior equipment, exterior equipment, refrigeration, generators).</li>\n                <li><strong>ELaux: </strong>Electricity consumption for auxiliary HVAC equipment (fans, pumps, heat recovery).</li>\n                <li><strong>NGheat: </strong>Natural gas consumption for heating related HVAC equipment (boilers, furnaces).</li>\n            </ul>\n        </>\n    )\n}\n","import React from \"react\";\nimport EndUseDoc from \"./endUseDoc\"\n\nexport default function DesignRightHand(){\n\n    return(\n        <>\n            <h5>Design Right-Hand Side</h5>\n            <img src={\"/simple-building-calculator/img/scenario_section_small.png\"} style={{height: \"600px\"}} alt=\"scenario_section\"/>\n            <p>Metrics and visualization of the energy end-use for the scenario is provided both as a plot and table format. \n                Plots can be downloaded and saved as a PNG and allow for some level of interaction within the tool in terms of features such as <span style={{fontFamily: \"Courier New\"}}>zoom</span>, <span style={{fontFamily: \"Courier New\"}}>pan </span>etc. \n                The table presents the savings and % savings in energy end-use for the scenario with the baseline</p>\n            <img src={\"/simple-building-calculator/img/plot_options.png\"} style={{width: \"400px\"}} alt=\"scenario_section\"/>\n            <p>The user can choose from six metrics for the plot and visualization</p>\n            <ol>\n                <li><strong>Site EUI: </strong>is the amount of site energy used in one year divided by the total square feet of building area.</li>\n                <li><strong>Source EUI: </strong>includes the total amount of raw fuel used at power plants to operate a building.</li>\n                <li><strong>Site Annual Energy: </strong></li>\n                <li><strong>Source Annual Energy: </strong></li>\n                <li><strong>Carbon Emission: </strong></li>\n                <li><strong>Utility Cost: </strong></li>\n            </ol>\n            <img src={\"/simple-building-calculator/img/scenario_right_metrics.png\"} style={{width: \"400px\"}} alt=\"scenario_right_metrics\"/>\n            <p>The energy end-use results for the simulations are aggregated into categories that were selected to combine end-use that are similarly affected by the independent parameters, for example combining fan and pump electricity consumption. </p>\n            <p>The energy end-use include: ELgen, ELcool, ELheat, ELaux and NGheat.</p>\n            <EndUseDoc></EndUseDoc>\n        </>\n    )\n}","import React from \"react\";\n\nexport default function ScenarioFullDoc(){\n\n    return(\n        <>\n            <h5>Scenario List Page</h5>\n            <p>Upon the creation of scenarios using the process above, the main \"Scenario\" tab is populated with the scenarios as a list on the left-hand side and a snapshot of the scenario on the right.</p>\n            <img src={\"/simple-building-calculator/img/sceanrio_tab.png\"} style={{width: \"800px\"}} alt=\"scenario_tab\"/>\n            <p>The scenario list can be sorted by name, time and EUI. \n                <span style={{fontFamily: \"Courier New\"}}>Active </span>scenarios are the scenarios created by the user and <span style={{fontFamily: \"Courier New\"}}>All </span>includes the \"Baseline\" and \"Max Tech\" scenarios for the comparison visualization. \n                The <span style={{fontFamily: \"Courier New\"}}>Options </span>button allows the user to <span style={{fontFamily: \"Courier New\"}}>edit</span>, <span style={{fontFamily: \"Courier New\"}}>duplicate </span>or <span style={{fontFamily: \"Courier New\"}}>archive </span>the scenario. \n                New scenarios can be created by duplicating scenarios and amending them or by using the <span style={{fontFamily: \"Courier New\"}}>New Scenario </span>button.</p>\n            <img src={\"/simple-building-calculator/img/scenario_options.png\"} style={{width: \"800px\"}} alt=\"scenario_options\"/>\n            <p>Clicking any scenario provides a snapshot of the scenario on the right-hand side of the tab.</p>\n            <img src={\"/simple-building-calculator/img/scenario_snapshot.png\"} style={{width: \"200px\"}} alt=\"scenario_snapshot\"/>\n            <p></p>\n        </>\n    )\n}","import React from \"react\";\n\nexport default function VisualizerCompareDoc(){\n\n    return(\n        <>\n            <h5>Visualization</h5>\n            <p>The visualization tab comprises of three tabs:</p>\n            <img src={\"/simple-building-calculator/img/viz_tab.png\"} style={{height: \"120px\"}} alt=\"viz_tab\"/>\n            <h5>Scenario Compare</h5>\n            <p>allows the user to visualize all the scenarios defined by the user along with the Baseline and Max Tech scenarios based on the six metrics and energy end-use as a plot and table. The plot is interactive with a hover feature that provides the data in the plot. \n                Plots can be downloaded and saved as a PNG and allow for some level of interaction within the tool in terms of features such as <span style={{fontFamily: \"Courier New\"}}>zoom</span>, <span style={{fontFamily: \"Courier New\"}}>pan</span> etc.\n                The table below provides the data on the Total Annual Energy per Square Foot and the Percent Savings from the baseline. \n            </p>\n            <p>The table below provides the data on the Total Annual Energy per Square Foot and the Percent Savings from the baseline. </p>\n            \n            <p>The table can be downloaded as a CSV file that can be used for data analysis.</p>\n        </>\n    )\n}","import React from \"react\";\n\nexport default function VisualizerOpportunityDoc(){\n\n    return(\n        <>\n            <h5>Saving Opportunity</h5>\n            <p>This tab provides the Sensitivity Diagram for the metrics comparing the Worst Case with the Max Tech Scenario across the ECM list. It is presented as a tornado diagram to help understand which measures have the largest impact on the building energy use. \n            Interpretation: The vertical line represents the project baseline case, while the orange bars to the right show increased performance metric (e.g., EUI) with the worst case, and bars to the left show reduced performance metric with the best case.\n            </p>\n            <img src={\"/simple-building-calculator/img/tornado.png\"} style={{height: \"600px\"}} alt=\"tornado\"/>\n            <ul>\n                <dd>- <strong>Measures:</strong> x-axis contains a list of measures that apply to the design</dd>\n                <dd>- <strong>Measure value:</strong> Value of the measure for each case, in a format of measure: value.</dd>\n                <dd>- <strong>Performance metric value:</strong> y-axis represents the value of a selected performance metrics. The values updated with the selected performance metric.</dd>\n                <dd>- <strong>Case information:</strong> display the information of the case, including the measure, measure value and the value of the selected performance metric. Show up when cursor is focused on the bar.</dd>\n            </ul>\n        </>\n    )\n}","import React from \"react\";\n\nexport default function VisualizerReportDoc(){\n\n    return(\n        <>\n            <h5>Scenario Report</h5>\n            <p>This tab comprises of six parts as shown below and provides a summary for every scenario by comparing it with the Standard for the chosen metric. The user can select from the six metrics for deeper insights. \n            </p>\n            <img src={\"/simple-building-calculator/img/report.png\"} style={{height: \"600px\"}} alt=\"report\"/>\n            <ul>\n                <dd>- <strong>1</strong> allows the user to select the scenario and performance metric using the drop-down menu. </dd>\n                <dd>- <strong>2</strong> and <strong>3</strong> provides a summary of the chosen scenario, comparing it with the baseline ASHRAE 90.1 performance metrics. IT gives a PASS of FAIL assessment of the design scenario.</dd>\n                <dd>- <strong>4</strong> provides the value and plot of the chosen Performance metric by the Energy Source breakdown for Electricity and Natural Gas, with a visualization in the form of the pie-chart. The plot can be downloaded as a PNG.</dd>\n                <dd>- <strong>5</strong> provides the values and plot of the chosen Performance metric by the End-Use Breakdown, with a visualization in the form of a pie-chart. The plot can be downloaded as a PNG.</dd>\n            </ul>\n        </>\n    )\n}","import React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport MainInterface from \"./subdoc/mainInterface\";\nimport ProjectDoc from \"./subdoc/projectDoc\";\nimport ScenarioDoc from \"./subdoc/scenarioDoc\";\nimport DesignLeftHand from \"./subdoc/designLeftHand\";\nimport DesignRightHand from \"./subdoc/designRightHand\";\nimport ScenarioFullDoc from \"./subdoc/scenarioFull\";\nimport VisualizerCompareDoc from \"./subdoc/visualizeCompareDoc\";\nimport VisualizerOpportunityDoc from \"./subdoc/visualizeOpportunityDoc\";\nimport VisualizerReportDoc from \"./subdoc/visualizeReport\";\n\nexport default function DocumentationPage(){\n\n    return (\n        <>\n            <div id=\"doc-top\">\n                <p>This guide aims to explain the main features of the tool and demonstrates the best ways to use it. The user interface has been designed to be intuitive and you can get more information by clicking on the page relevant to the specific input or topic. </p>\n            </div>\n            <ListGroup as =\"ol\" numbered>\n                <ListGroup.Item as=\"li\"><a href=\"#maininterface\">Main interface</a></ListGroup.Item>\n                <ListGroup.Item as=\"li\"><a href=\"#projectDoc\">Project</a></ListGroup.Item>\n                <ListGroup.Item as=\"li\"><a href=\"#scenarioDoc\">Scenario: Start</a></ListGroup.Item>\n                <ListGroup.Item as=\"li\"><a href=\"#designLeftHand\">Design: Left</a></ListGroup.Item>\n                <ListGroup.Item as=\"li\"><a href=\"#designRightHand\">Design: Right</a></ListGroup.Item>\n                <ListGroup.Item as=\"li\"><a href=\"#scenarioFull\">Scenario: List</a></ListGroup.Item>\n                <ListGroup.Item as=\"li\"><a href=\"#visualizeCompare\">Visualization: Compare</a></ListGroup.Item>\n                <ListGroup.Item as=\"li\"><a href=\"#visualizeOpportunity\">Visualization: Saving Opportunity</a></ListGroup.Item>\n                <ListGroup.Item as=\"li\"><a href=\"#visualizeReport\">Visualization: Report</a></ListGroup.Item>\n\n            </ListGroup>\n            <hr style={{marginTop: \"30px\", marginBottom: \"30px\"}}></hr>\n            <div id=\"maininterface\" style={{marginTop: \"20px\"}}>\n                <MainInterface></MainInterface>\n                <a href=\"#doc-top\">Back</a>\n            </div>\n            <hr style={{marginTop: \"30px\", marginBottom: \"30px\"}}></hr>\n            <div id=\"projectDoc\" style={{marginTop: \"20px\"}}>\n                <ProjectDoc></ProjectDoc>\n                <a href=\"#doc-top\">Back</a>\n            </div>\n            <hr style={{marginTop: \"30px\", marginBottom: \"30px\"}}></hr>\n            <div id=\"scenarioDoc\" style={{marginTop: \"20px\"}}>\n                <ScenarioDoc></ScenarioDoc>\n                <a href=\"#doc-top\">Back</a>\n            </div>\n            <hr style={{marginTop: \"30px\", marginBottom: \"30px\"}}></hr>\n            <div id=\"designLeftHand\" style={{marginTop:\"20px\"}}>\n                <DesignLeftHand></DesignLeftHand>\n                <a href=\"#doc-top\">Back</a>\n            </div>\n            <hr style={{marginTop: \"30px\", marginBottom: \"30px\"}}></hr>\n            <div id=\"designRightHand\" style={{marginTop:\"20px\"}}>\n                <DesignRightHand></DesignRightHand>\n                <a href=\"#doc-top\">Back</a>\n            </div>\n            <hr style={{marginTop: \"30px\", marginBottom: \"30px\"}}></hr>\n            <div id=\"scenarioFull\" style={{marginTop:\"20px\"}}>\n                <ScenarioFullDoc></ScenarioFullDoc>\n                <a href=\"#doc-top\">Back</a>\n            </div>\n            <hr style={{marginTop: \"30px\", marginBottom: \"30px\"}}></hr>\n            <div id=\"visualizeCompare\" style={{marginTop:\"20px\"}}>\n                <VisualizerCompareDoc></VisualizerCompareDoc>\n                <a href=\"#doc-top\">Back</a>\n            </div>\n            <hr style={{marginTop: \"30px\", marginBottom: \"30px\"}}></hr>\n            <div id=\"visualizeOpportunity\" style={{marginTop:\"20px\"}}>\n                <VisualizerOpportunityDoc></VisualizerOpportunityDoc>\n                <a href=\"#doc-top\">Back</a>\n            </div>\n            <hr style={{marginTop: \"30px\", marginBottom: \"30px\"}}></hr>\n            <div id=\"visualizeReport\" style={{marginTop:\"20px\"}}>\n                <VisualizerReportDoc></VisualizerReportDoc>\n                <a href=\"#doc-top\">Back</a>\n            </div>\n        </>\n    )\n}","import React from \"react\"\n\nexport default function OverviewPage(){\n    return (\n        <>\n            <p>The <strong>Simple Building Calculator (SBC) </strong> is a tool for small and simple commercial buildings to generate quick and interactive estimates of energy efficiency measures. </p>\n            <p>SBC can evaluate whole-building or single measure savings in new or existing buildings, compare measure package choices, or provide simplified performance modeling for energy codes and utility incentives. </p>\n            <p>The tool combines physical (annual whole building prototype simulation) and statistical modeling techniques to predict annual energy performance. It supports a variety of building characteristics for envelope, HVAC, and lighting with parameters ranging from vintage to maximum technology (max-tech) configurations, as well as support for single-zone and simple multi-zone HVAC systems. </p>\n            <p>The Simple Building Calculator is designed to provide immediate feedback for otherwise computationally intensive tasks like measure comparison, development of multiple measure package combinations, or verification that measures meet efficiency targets—all with the goal of providing a tool for quick annual energy simulation of simple commercial buildings. </p>\n            <a href=\"https://pnnl.github.io/simple-building-calculator\">Live deployment of the tool</a>\n            <hr></hr>\n            <h5>Main features (Video) | Walk through example </h5>\n            <hr></hr>\n            <h5>Impact</h5>\n            <p>The <strong>Simple Building Calculator (SBC)</strong> has several practical applications such as providing a quick energy estimate for interactive savings in simple buildings. While the tool is not intended for precise results, it will compare interactive impact of various measure combinations quickly and allow selection of packages of integrated design options for simple commercial buildings to achieve target levels of energy efficiency compared to a standard baseline design without custom simulation. These savings can be applied to energy codes, utility incentive programs, building rating programs, or advanced design efforts. </p>\n            <hr></hr>\n            <h5>Cite us</h5>\n            <p>Nambiar, Chitra, and Reid Hart. \"SIMPLE BUILDING CALCULATOR.\" In <i>ASHRAE Topical Conference Proceedings</i>, pp. 423-430. American Society of Heating, Refrigeration and Air Conditioning Engineers, Inc., 2020. <a href=\"/simple-building-calculator/doc/d-bsc20-c051.pdf\">Read</a></p>\n            <p>Hart, Reid, Chitra Chandrasekharan Nambiar, Jeremiah Williams, and Michael Reiner. \"An Energy Calculator for Simple Commercial Buildings.\" (2020). <a href=\"/simple-building-calculator/doc/143_0376_0549_000237.pdf\">Read</a></p>\n            <p>The tool is developed and maintained by the Pacific Northwest National Laboratory (PNNL)</p>\n        </>\n    )\n}","import { Row, Col, Nav, Tab, ListGroup } from \"react-bootstrap\";\nimport DocumentationPage from \"../userdoc/documentation\";\nimport OverviewPage from \"../userdoc/overview\"\n\nfunction Manual(){\n    return(\n        <>\n        <div className=\"icard\">\n            <div className=\"icard-title\"><h3>PNNL Simple Building Calculator Tool</h3> <p style={{color: \"#767171\"}}>Official documentation website</p></div>\n            <div className=\"icard-content\">\n                <Tab.Container id=\"user_doc\" defaultActiveKey=\"#overview\">\n                    <Row>\n                        <Col sm={2}>\n                            <ListGroup>\n                                <ListGroup.Item action href=\"#overview\">\n                                    Overview\n                                </ListGroup.Item>\n                                <ListGroup.Item action href=\"#documentation\">\n                                    Documentation\n                                </ListGroup.Item>\n                                {/*<ListGroup.Item action href=\"#limitations\">\n                                    Limitations</ListGroup.Item>*/}\n                            </ListGroup>\n                        </Col>\n                        <Col sm={10}>\n                            <Tab.Content>\n                                <Tab.Pane eventKey=\"#overview\">\n                                    <OverviewPage/>\n                                </Tab.Pane>\n                                <Tab.Pane eventKey=\"#documentation\">\n                                    <DocumentationPage/>\n                                </Tab.Pane>\n                                {/*<Tab.Pane eventKey=\"#limitations\">\n                                    <p>Placeholder</p>\n                                </Tab.Pane>*/}\n                            </Tab.Content>\n                        </Col>\n                    </Row>\n                </Tab.Container>\n            </div>\n        </div>\n        </>\n    )\n} \n\nexport default Manual","import \"./App.css\";\nimport React from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Project from \"./views/projectPage\";\nimport Design from \"./views/designPage\";\nimport Scenario from \"./views/scenarioPage\";\nimport Visualizer from \"./views/visualizationPage\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\nimport Manual from \"./views/userDoc\";\n\nfunction App() {\n  //GLOBAL VARIABLES\n\n  //RENDERS\n  return (\n    <BrowserRouter basename=\"/simple-building-calculator\">\n      <NavBar />\n      <div className=\"App container py-6\" style={{ textAlign: \"left\" }}>\n        <Routes>\n          <Route path=\"/project\" element={<Project />}></Route>\n          <Route path=\"/design/:scenarioId\" element={<Design />}></Route>\n          <Route path=\"/scenario\" element={<Scenario />}></Route>\n          <Route path=\"/visual\" element={<Visualizer />}></Route>\n          <Route path=\"/manual\" element={<Manual />}></Route>\n          <Route path=\"/\" element={<Navigate replace to=\"/project\" />}></Route>\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  AdvancedConfigProvider,\n  ProjectProvider,\n  ScenarioListProvider,\n  ScenarioProvider,\n} from \"./store/index\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <ProjectProvider>\n    <AdvancedConfigProvider>\n      <ScenarioListProvider>\n        <ScenarioProvider>\n          <App />\n        </ScenarioProvider>\n      </ScenarioListProvider>\n    </AdvancedConfigProvider>\n  </ProjectProvider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}